

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 05 10:42:03 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 1.42
    34                           ; Generated 13/04/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F887 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0088                     	;# 
   107  0089                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  008F                     	;# 
   112  0090                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  0105                     	;# 
   131  0107                     	;# 
   132  0108                     	;# 
   133  0109                     	;# 
   134  010C                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  0185                     	;# 
   140  0187                     	;# 
   141  0188                     	;# 
   142  0189                     	;# 
   143  018C                     	;# 
   144  018D                     	;# 
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0008                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  000E                     	;# 
   161  000F                     	;# 
   162  0010                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0013                     	;# 
   166  0014                     	;# 
   167  0015                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001B                     	;# 
   175  001B                     	;# 
   176  001C                     	;# 
   177  001D                     	;# 
   178  001E                     	;# 
   179  001F                     	;# 
   180  0081                     	;# 
   181  0085                     	;# 
   182  0086                     	;# 
   183  0087                     	;# 
   184  0088                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0088                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  008F                     	;# 
   268  0090                     	;# 
   269  0091                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0094                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  0105                     	;# 
   287  0107                     	;# 
   288  0108                     	;# 
   289  0109                     	;# 
   290  010C                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0187                     	;# 
   297  0188                     	;# 
   298  0189                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301                           
   302                           	psect	idataCOMMON
   303  0554                     __pidataCOMMON:	
   304                           
   305                           ;initializer for _pwmg
   306  0554  3423               	retlw	35
   307                           
   308                           ;initializer for _pwmr
   309  0555  34FF               	retlw	255
   310                           
   311                           	psect	idataBANK0
   312  0556                     __pidataBANK0:	
   313                           
   314                           ;initializer for _encpwmmode
   315  0556  3401               	retlw	1
   316                           
   317                           ;initializer for _paso
   318  0557  3423               	retlw	35
   319                           
   320                           	psect	strings
   321  0400                     __pstrings:	
   322  0400                     stringtab:	
   323  0400                     __stringtab:	
   324                           
   325                           ;	String table - string pointers are 1 byte each
   326  0400  1BFF               	btfsc	btemp+1,7
   327  0401  2C0A               	ljmp	stringcode
   328  0402  1383               	bcf	3,7
   329  0403  187F               	btfsc	btemp+1,0
   330  0404  1783               	bsf	3,7
   331  0405  0800               	movf	0,w
   332  0406  0A84               	incf	4,f
   333  0407  1903               	skipnz
   334  0408  0AFF               	incf	btemp+1,f
   335  0409  0008               	return
   336  040A                     stringcode:	
   337  040A                     stringdir:	
   338  040A  3004               	movlw	high stringdir
   339  040B  008A               	movwf	10
   340  040C  0804               	movf	4,w
   341  040D  0A84               	incf	4,f
   342  040E  0782               	addwf	2,f
   343  040F                     __stringbase:	
   344  040F  3400               	retlw	0
   345  0410                     __end_of__stringtab:	
   346  0410                     _dpowers:	
   347  0410  3401               	retlw	1
   348  0411  3400               	retlw	0
   349  0412  340A               	retlw	10
   350  0413  3400               	retlw	0
   351  0414  3464               	retlw	100
   352  0415  3400               	retlw	0
   353  0416  34E8               	retlw	232
   354  0417  3403               	retlw	3
   355  0418  3410               	retlw	16
   356  0419  3427               	retlw	39
   357  041A                     __end_of_dpowers:	
   358  001A                     _RCREG	set	26
   359  0019                     _TXREG	set	25
   360  0005                     _PORTAbits	set	5
   361  0007                     _PORTCbits	set	7
   362  0012                     _T2CON	set	18
   363  0009                     _PORTEbits	set	9
   364  0009                     _PORTE	set	9
   365  0008                     _PORTD	set	8
   366  0007                     _PORTC	set	7
   367  0005                     _PORTA	set	5
   368  0008                     _PORTDbits	set	8
   369  0011                     _TMR2	set	17
   370  0001                     _TMR0	set	1
   371  0006                     _PORTBbits	set	6
   372  000B                     _INTCON	set	11
   373  000B                     _INTCONbits	set	11
   374  008C                     _PIE1bits	set	140
   375  0098                     _TXSTAbits	set	152
   376  0096                     _IOCB	set	150
   377  0092                     _PR2	set	146
   378  0081                     _OPTION_REG	set	129
   379  0089                     _TRISE	set	137
   380  0088                     _TRISD	set	136
   381  0087                     _TRISC	set	135
   382  0086                     _TRISB	set	134
   383  0085                     _TRISA	set	133
   384  0189                     _ANSELH	set	393
   385  0188                     _ANSEL	set	392
   386  041A                     STR_2:	
   387  041A  3452               	retlw	82	;'R'
   388  041B  343A               	retlw	58	;':'
   389  041C  3425               	retlw	37	;'%'
   390  041D  3433               	retlw	51	;'3'
   391  041E  3464               	retlw	100	;'d'
   392  041F  3447               	retlw	71	;'G'
   393  0420  343A               	retlw	58	;':'
   394  0421  3425               	retlw	37	;'%'
   395  0422  3433               	retlw	51	;'3'
   396  0423  3464               	retlw	100	;'d'
   397  0424  3442               	retlw	66	;'B'
   398  0425  343A               	retlw	58	;':'
   399  0426  3425               	retlw	37	;'%'
   400  0427  3433               	retlw	51	;'3'
   401  0428  3464               	retlw	100	;'d'
   402  0429  3400               	retlw	0
   403  042A                     STR_1:	
   404  042A  3449               	retlw	73	;'I'
   405  042B  346E               	retlw	110	;'n'
   406  042C  3469               	retlw	105	;'i'
   407  042D  3463               	retlw	99	;'c'
   408  042E  3469               	retlw	105	;'i'
   409  042F  3461               	retlw	97	;'a'
   410  0430  3464               	retlw	100	;'d'
   411  0431  346F               	retlw	111	;'o'
   412  0432  3400               	retlw	0
   413  0433                     STR_3:	
   414  0433  3473               	retlw	115	;'s'
   415  0434  3465               	retlw	101	;'e'
   416  0435  3474               	retlw	116	;'t'
   417  0436  343A               	retlw	58	;':'
   418  0437  3425               	retlw	37	;'%'
   419  0438  3433               	retlw	51	;'3'
   420  0439  3464               	retlw	100	;'d'
   421  043A  3400               	retlw	0
   422                           
   423                           ; #config settings
   424  0000                     
   425                           	psect	cinit
   426  0015                     start_initialization:	
   427  0015                     __initialization:	
   428                           
   429                           ; Initialize objects allocated to BANK0
   430  0015  120A  118A  2556  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   431  001A  00D8               	movwf	__pdataBANK0& (0+127)
   432  001B  120A  118A  2557  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   433  0020  00D9               	movwf	(__pdataBANK0+1)& (0+127)
   434                           
   435                           ; Initialize objects allocated to COMMON
   436  0021  120A  118A  2554  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   437  0026  00FC               	movwf	__pdataCOMMON& (0+127)
   438  0027  120A  118A  2555  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   439  002C  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   440                           
   441                           ; Clear objects allocated to BANK0
   442  002D  1383               	bcf	3,7	;select IRP bank0
   443  002E  3048               	movlw	low __pbssBANK0
   444  002F  0084               	movwf	4
   445  0030  3058               	movlw	low (__pbssBANK0+16)
   446  0031  120A  118A  254C   	fcall	clear_ram0
   447                           
   448                           ; Clear objects allocated to BITCOMMON
   449  0034  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   450  0035                     end_of_initialization:	
   451                           ;End of C runtime variable initialization code
   452                           
   453  0035                     __end_of__initialization:	
   454  0035  0183               	clrf	3
   455  0036  120A  118A  29AF   	ljmp	_main	;jump to C main() function
   456                           
   457                           	psect	bitbssCOMMON
   458  03D8                     __pbitbssCOMMON:	
   459  03D8                     _but2:	
   460  03D8                     	ds	1
   461  03D9                     _but1:	
   462  03D9                     	ds	1
   463  03DA                     _renc_b_ant:	
   464  03DA                     	ds	1
   465  03DB                     _renc_a_ant:	
   466  03DB                     	ds	1
   467                           
   468                           	psect	dataCOMMON
   469  007C                     __pdataCOMMON:	
   470  007C                     _pwmg:	
   471  007C                     	ds	1
   472  007D                     _pwmr:	
   473  007D                     	ds	1
   474                           
   475                           	psect	bssBANK0
   476  0048                     __pbssBANK0:	
   477  0048                     _pwmb:	
   478  0048                     	ds	1
   479  0049                     _vector:	
   480  0049                     	ds	15
   481                           
   482                           	psect	dataBANK0
   483  0058                     __pdataBANK0:	
   484  0058                     _encpwmmode:	
   485  0058                     	ds	1
   486  0059                     _paso:	
   487  0059                     	ds	1
   488                           
   489                           	psect	clrtext
   490  054C                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  054C  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  054D                     clrloop0:	
   496  054D  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  054E  0A84               	incf	4,f	;increment pointer
   498  054F  0604               	xorwf	4,w	;XOR with final address
   499  0550  1903               	btfsc	3,2	;have we reached the end yet?
   500  0551  3400               	retlw	0	;all done for this memory range, return
   501  0552  0604               	xorwf	4,w	;XOR again to restore value
   502  0553  2D4D               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackCOMMON
   505  0070                     __pcstackCOMMON:	
   506  0070                     ?_isdigit:	
   507  0070                     ?_lcd_write:	
   508                           ; 1 bit 
   509                           
   510  0070                     ?_lcd_init:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_lcd_clear:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ?_pwmupdate:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     ?_lcd_putch:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ?_isr:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     ??_isr:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0070                     ?_main:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0070                     ?_Lcd_Port:	
   532                           ; 1 bytes @ 0x0
   533                           
   534                           
   535                           ; 1 bytes @ 0x0
   536  0070                     	ds	7
   537  0077                     isr@rbif:	
   538                           
   539                           ; 2 bytes @ 0x7
   540  0077                     	ds	2
   541  0079                     isr@t0if:	
   542                           
   543                           ; 2 bytes @ 0x9
   544  0079                     	ds	2
   545                           
   546                           	psect	cstackBANK0
   547  0020                     __pcstackBANK0:	
   548  0020                     ??_pwmupdate:	
   549  0020                     ??_isdigit:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0020                     ??_Lcd_Port:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0020                     ?___wmul:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0020                     ?___lwdiv:	
   559                           ; 2 bytes @ 0x0
   560                           
   561  0020                     Lcd_Port@a:	
   562                           ; 2 bytes @ 0x0
   563                           
   564  0020                     _isdigit$624:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0020                     ___wmul@multiplier:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0020                     ___lwdiv@divisor:	
   571                           ; 2 bytes @ 0x0
   572                           
   573                           
   574                           ; 2 bytes @ 0x0
   575  0020                     	ds	1
   576  0021                     ??_lcd_write:	
   577  0021                     isdigit@c:	
   578                           ; 1 bytes @ 0x1
   579                           
   580                           
   581                           ; 1 bytes @ 0x1
   582  0021                     	ds	1
   583  0022                     lcd_write@c:	
   584  0022                     ___wmul@multiplicand:	
   585                           ; 1 bytes @ 0x2
   586                           
   587  0022                     ___lwdiv@dividend:	
   588                           ; 2 bytes @ 0x2
   589                           
   590                           
   591                           ; 2 bytes @ 0x2
   592  0022                     	ds	1
   593  0023                     ??_lcd_init:	
   594  0023                     ??_lcd_clear:	
   595                           ; 1 bytes @ 0x3
   596                           
   597  0023                     ?_lcd_setCursor:	
   598                           ; 1 bytes @ 0x3
   599                           
   600  0023                     ??_lcd_putch:	
   601                           ; 1 bytes @ 0x3
   602                           
   603  0023                     lcd_putch@c:	
   604                           ; 1 bytes @ 0x3
   605                           
   606  0023                     lcd_setCursor@columna:	
   607                           ; 1 bytes @ 0x3
   608                           
   609                           
   610                           ; 2 bytes @ 0x3
   611  0023                     	ds	1
   612  0024                     ?_lcd_print:	
   613  0024                     ??___wmul:	
   614                           ; 1 bytes @ 0x4
   615                           
   616  0024                     ??___lwdiv:	
   617                           ; 1 bytes @ 0x4
   618                           
   619  0024                     lcd_print@s:	
   620                           ; 1 bytes @ 0x4
   621                           
   622  0024                     ___wmul@product:	
   623                           ; 2 bytes @ 0x4
   624                           
   625                           
   626                           ; 2 bytes @ 0x4
   627  0024                     	ds	1
   628  0025                     lcd_setCursor@fila:	
   629  0025                     ___lwdiv@quotient:	
   630                           ; 2 bytes @ 0x5
   631                           
   632                           
   633                           ; 2 bytes @ 0x5
   634  0025                     	ds	1
   635  0026                     ??_lcd_print:	
   636                           
   637                           ; 1 bytes @ 0x6
   638  0026                     	ds	1
   639  0027                     ??_lcd_setCursor:	
   640  0027                     lcd_print@cs:	
   641                           ; 1 bytes @ 0x7
   642                           
   643  0027                     ___lwdiv@counter:	
   644                           ; 1 bytes @ 0x7
   645                           
   646                           
   647                           ; 1 bytes @ 0x7
   648  0027                     	ds	1
   649  0028                     ?___lwmod:	
   650  0028                     ___lwmod@divisor:	
   651                           ; 2 bytes @ 0x8
   652                           
   653                           
   654                           ; 2 bytes @ 0x8
   655  0028                     	ds	2
   656  002A                     ___lwmod@dividend:	
   657                           
   658                           ; 2 bytes @ 0xA
   659  002A                     	ds	2
   660  002C                     ??___lwmod:	
   661                           
   662                           ; 1 bytes @ 0xC
   663  002C                     	ds	1
   664  002D                     ___lwmod@counter:	
   665                           
   666                           ; 1 bytes @ 0xD
   667  002D                     	ds	1
   668  002E                     ?_sprintf:	
   669  002E                     sprintf@f:	
   670                           ; 2 bytes @ 0xE
   671                           
   672                           
   673                           ; 1 bytes @ 0xE
   674  002E                     	ds	7
   675  0035                     ??_sprintf:	
   676                           
   677                           ; 1 bytes @ 0x15
   678  0035                     	ds	3
   679  0038                     sprintf@ap:	
   680                           
   681                           ; 1 bytes @ 0x18
   682  0038                     	ds	1
   683  0039                     sprintf@prec:	
   684                           
   685                           ; 1 bytes @ 0x19
   686  0039                     	ds	1
   687  003A                     sprintf@flag:	
   688                           
   689                           ; 1 bytes @ 0x1A
   690  003A                     	ds	1
   691  003B                     sprintf@val:	
   692                           
   693                           ; 2 bytes @ 0x1B
   694  003B                     	ds	2
   695  003D                     sprintf@width:	
   696                           
   697                           ; 2 bytes @ 0x1D
   698  003D                     	ds	2
   699  003F                     sprintf@sp:	
   700                           
   701                           ; 1 bytes @ 0x1F
   702  003F                     	ds	1
   703  0040                     sprintf@c:	
   704                           
   705                           ; 1 bytes @ 0x20
   706  0040                     	ds	1
   707  0041                     ??_main:	
   708                           
   709                           ; 1 bytes @ 0x21
   710  0041                     	ds	7
   711                           
   712                           	psect	maintext
   713  01AF                     __pmaintext:	
   714 ;;
   715 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   716 ;;
   717 ;; *************** function _main *****************
   718 ;; Defined at:
   719 ;;		line 123 in file "main.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : B00/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   733 ;;      Params:         0       0       0       0       0
   734 ;;      Locals:         0       0       0       0       0
   735 ;;      Temps:          0       7       0       0       0
   736 ;;      Totals:         0       7       0       0       0
   737 ;;Total ram usage:        7 bytes
   738 ;; Hardware stack levels required when called:    5
   739 ;; This function calls:
   740 ;;		_lcd_clear
   741 ;;		_lcd_init
   742 ;;		_lcd_print
   743 ;;		_lcd_setCursor
   744 ;;		_lcd_write
   745 ;;		_pwmupdate
   746 ;;		_sprintf
   747 ;; This function is called by:
   748 ;;		Startup code after reset
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           
   753                           ;psect for function _main
   754  01AF                     _main:	
   755                           
   756                           ;main.c: 125: TRISA = 0xC8;
   757                           
   758                           ;incstack = 0
   759                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   760  01AF  30C8               	movlw	200
   761  01B0  1683               	bsf	3,5	;RP0=1, select bank1
   762  01B1  1303               	bcf	3,6	;RP1=0, select bank1
   763  01B2  0085               	movwf	5	;volatile
   764                           
   765                           ;main.c: 126: PORTA = 0x00;
   766  01B3  1283               	bcf	3,5	;RP0=0, select bank0
   767  01B4  1303               	bcf	3,6	;RP1=0, select bank0
   768  01B5  0185               	clrf	5	;volatile
   769                           
   770                           ;main.c: 127: TRISB = 0xFF;
   771  01B6  30FF               	movlw	255
   772  01B7  1683               	bsf	3,5	;RP0=1, select bank1
   773  01B8  1303               	bcf	3,6	;RP1=0, select bank1
   774  01B9  0086               	movwf	6	;volatile
   775                           
   776                           ;main.c: 128: TRISC = 0x83;
   777  01BA  3083               	movlw	131
   778  01BB  0087               	movwf	7	;volatile
   779                           
   780                           ;main.c: 129: PORTC = 0x00;
   781  01BC  1283               	bcf	3,5	;RP0=0, select bank0
   782  01BD  1303               	bcf	3,6	;RP1=0, select bank0
   783  01BE  0187               	clrf	7	;volatile
   784                           
   785                           ;main.c: 130: TRISD = 0x00;
   786  01BF  1683               	bsf	3,5	;RP0=1, select bank1
   787  01C0  1303               	bcf	3,6	;RP1=0, select bank1
   788  01C1  0188               	clrf	8	;volatile
   789                           
   790                           ;main.c: 131: PORTD = 0x00;
   791  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   792  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   793  01C4  0188               	clrf	8	;volatile
   794                           
   795                           ;main.c: 132: TRISE = 0x00;
   796  01C5  1683               	bsf	3,5	;RP0=1, select bank1
   797  01C6  1303               	bcf	3,6	;RP1=0, select bank1
   798  01C7  0189               	clrf	9	;volatile
   799                           
   800                           ;main.c: 133: PORTE = 0x00;
   801  01C8  1283               	bcf	3,5	;RP0=0, select bank0
   802  01C9  1303               	bcf	3,6	;RP1=0, select bank0
   803  01CA  0189               	clrf	9	;volatile
   804                           
   805                           ;main.c: 135: ANSEL = 0x08;
   806  01CB  3008               	movlw	8
   807  01CC  1683               	bsf	3,5	;RP0=1, select bank3
   808  01CD  1703               	bsf	3,6	;RP1=1, select bank3
   809  01CE  0088               	movwf	8	;volatile
   810                           
   811                           ;main.c: 136: ANSELH = 0x17;
   812  01CF  3017               	movlw	23
   813  01D0  0089               	movwf	9	;volatile
   814                           
   815                           ;main.c: 139: PORTEbits.RE1 = 1;
   816  01D1  1283               	bcf	3,5	;RP0=0, select bank0
   817  01D2  1303               	bcf	3,6	;RP1=0, select bank0
   818  01D3  1489               	bsf	9,1	;volatile
   819                           
   820                           ;main.c: 141: lcd_write(0);
   821  01D4  3000               	movlw	0
   822  01D5  120A  118A  2364  120A  118A  	fcall	_lcd_write
   823                           
   824                           ;main.c: 143: lcd_init();
   825  01DA  120A  118A  2300  120A  118A  	fcall	_lcd_init
   826                           
   827                           ;main.c: 144: lcd_clear();
   828  01DF  120A  118A  251E  120A  118A  	fcall	_lcd_clear
   829                           
   830                           ;main.c: 145: lcd_print("Iniciado");
   831  01E4  301B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   832  01E5  1283               	bcf	3,5	;RP0=0, select bank0
   833  01E6  1303               	bcf	3,6	;RP1=0, select bank0
   834  01E7  00A4               	movwf	lcd_print@s
   835  01E8  3080               	movlw	128
   836  01E9  00A5               	movwf	lcd_print@s+1
   837  01EA  120A  118A  24A2  120A  118A  	fcall	_lcd_print
   838                           
   839                           ;main.c: 148: OPTION_REG = 0xC8;
   840  01EF  30C8               	movlw	200
   841  01F0  1683               	bsf	3,5	;RP0=1, select bank1
   842  01F1  1303               	bcf	3,6	;RP1=0, select bank1
   843  01F2  0081               	movwf	1	;volatile
   844                           
   845                           ;main.c: 149: TMR0 = 176;
   846  01F3  30B0               	movlw	176
   847  01F4  1283               	bcf	3,5	;RP0=0, select bank0
   848  01F5  1303               	bcf	3,6	;RP1=0, select bank0
   849  01F6  0081               	movwf	1	;volatile
   850                           
   851                           ;main.c: 152: T2CON = 0x26;
   852  01F7  3026               	movlw	38
   853  01F8  0092               	movwf	18	;volatile
   854                           
   855                           ;main.c: 153: TMR2 = 0;
   856  01F9  0191               	clrf	17	;volatile
   857                           
   858                           ;main.c: 154: PR2 = 255;
   859  01FA  30FF               	movlw	255
   860  01FB  1683               	bsf	3,5	;RP0=1, select bank1
   861  01FC  1303               	bcf	3,6	;RP1=0, select bank1
   862  01FD  0092               	movwf	18	;volatile
   863                           
   864                           ;main.c: 157: IOCB = 0xF0;
   865  01FE  30F0               	movlw	240
   866  01FF  0096               	movwf	22	;volatile
   867                           
   868                           ;main.c: 158: INTCON = 0xA8;
   869  0200  30A8               	movlw	168
   870  0201  008B               	movwf	11	;volatile
   871  0202                     l1427:	
   872                           ;main.c: 160: while (1)
   873                           
   874                           
   875                           ;main.c: 161: {
   876                           ;main.c: 162: _delay((unsigned long)((50)*(20000000/4000.0)));
   877  0202  3002               	movlw	2
   878  0203  1283               	bcf	3,5	;RP0=0, select bank0
   879  0204  1303               	bcf	3,6	;RP1=0, select bank0
   880  0205  00C3               	movwf	??_main+2
   881  0206  3045               	movlw	69
   882  0207  00C2               	movwf	??_main+1
   883  0208  30A9               	movlw	169
   884  0209  00C1               	movwf	??_main
   885  020A                     u1117:	
   886  020A  0BC1               	decfsz	??_main,f
   887  020B  2A0A               	goto	u1117
   888  020C  0BC2               	decfsz	??_main+1,f
   889  020D  2A0A               	goto	u1117
   890  020E  0BC3               	decfsz	??_main+2,f
   891  020F  2A0A               	goto	u1117
   892                           
   893                           ;main.c: 163: pwmupdate();
   894  0210  120A  118A  246F  120A  118A  	fcall	_pwmupdate
   895                           
   896                           ;main.c: 164: INTCONbits.GIE = 0;
   897  0215  138B               	bcf	11,7	;volatile
   898                           
   899                           ;main.c: 165: sprintf(vector, "R:%3dG:%3dB:%3d", pwmr, pwmg, pwmb);
   900  0216  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   901  0217  1283               	bcf	3,5	;RP0=0, select bank0
   902  0218  1303               	bcf	3,6	;RP1=0, select bank0
   903  0219  00C1               	movwf	??_main
   904  021A  0841               	movf	??_main,w
   905  021B  00AE               	movwf	sprintf@f
   906  021C  087D               	movf	_pwmr,w
   907  021D  00C2               	movwf	??_main+1
   908  021E  01C3               	clrf	??_main+2
   909  021F  0842               	movf	??_main+1,w
   910  0220  00AF               	movwf	?_sprintf+1
   911  0221  0843               	movf	??_main+2,w
   912  0222  00B0               	movwf	?_sprintf+2
   913  0223  087C               	movf	_pwmg,w
   914  0224  00C4               	movwf	??_main+3
   915  0225  01C5               	clrf	??_main+4
   916  0226  0844               	movf	??_main+3,w
   917  0227  00B1               	movwf	?_sprintf+3
   918  0228  0845               	movf	??_main+4,w
   919  0229  00B2               	movwf	?_sprintf+4
   920  022A  0848               	movf	_pwmb,w
   921  022B  00C6               	movwf	??_main+5
   922  022C  01C7               	clrf	??_main+6
   923  022D  0846               	movf	??_main+5,w
   924  022E  00B3               	movwf	?_sprintf+5
   925  022F  0847               	movf	??_main+6,w
   926  0230  00B4               	movwf	?_sprintf+6
   927  0231  3049               	movlw	(low (_vector| 0))& (0+255)
   928  0232  120A  118A  2039  120A  118A  	fcall	_sprintf
   929                           
   930                           ;main.c: 166: lcd_setCursor(0,0);
   931  0237  3000               	movlw	0
   932  0238  1283               	bcf	3,5	;RP0=0, select bank0
   933  0239  1303               	bcf	3,6	;RP1=0, select bank0
   934  023A  00A3               	movwf	lcd_setCursor@columna
   935  023B  00A4               	movwf	lcd_setCursor@columna+1
   936  023C  3000               	movlw	0
   937  023D  00A5               	movwf	lcd_setCursor@fila
   938  023E  00A6               	movwf	lcd_setCursor@fila+1
   939  023F  120A  118A  24ED  120A  118A  	fcall	_lcd_setCursor
   940                           
   941                           ;main.c: 167: lcd_print(vector);
   942  0244  3049               	movlw	(low (_vector| 0))& (0+255)
   943  0245  1283               	bcf	3,5	;RP0=0, select bank0
   944  0246  1303               	bcf	3,6	;RP1=0, select bank0
   945  0247  00A4               	movwf	lcd_print@s
   946  0248  3000               	movlw	0
   947  0249  00A5               	movwf	lcd_print@s+1
   948  024A  120A  118A  24A2  120A  118A  	fcall	_lcd_print
   949                           
   950                           ;main.c: 168: sprintf(vector, "set:%3d", paso);
   951  024F  3024               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   952  0250  1283               	bcf	3,5	;RP0=0, select bank0
   953  0251  1303               	bcf	3,6	;RP1=0, select bank0
   954  0252  00C1               	movwf	??_main
   955  0253  0841               	movf	??_main,w
   956  0254  00AE               	movwf	sprintf@f
   957  0255  0859               	movf	_paso,w
   958  0256  00C2               	movwf	??_main+1
   959  0257  01C3               	clrf	??_main+2
   960  0258  0842               	movf	??_main+1,w
   961  0259  00AF               	movwf	?_sprintf+1
   962  025A  0843               	movf	??_main+2,w
   963  025B  00B0               	movwf	?_sprintf+2
   964  025C  3049               	movlw	(low (_vector| 0))& (0+255)
   965  025D  120A  118A  2039  120A  118A  	fcall	_sprintf
   966                           
   967                           ;main.c: 169: lcd_setCursor(0,1);
   968  0262  3000               	movlw	0
   969  0263  1283               	bcf	3,5	;RP0=0, select bank0
   970  0264  1303               	bcf	3,6	;RP1=0, select bank0
   971  0265  00A3               	movwf	lcd_setCursor@columna
   972  0266  00A4               	movwf	lcd_setCursor@columna+1
   973  0267  3001               	movlw	1
   974  0268  00A5               	movwf	lcd_setCursor@fila
   975  0269  3000               	movlw	0
   976  026A  00A6               	movwf	lcd_setCursor@fila+1
   977  026B  120A  118A  24ED  120A  118A  	fcall	_lcd_setCursor
   978                           
   979                           ;main.c: 170: lcd_print(vector);
   980  0270  3049               	movlw	(low (_vector| 0))& (0+255)
   981  0271  1283               	bcf	3,5	;RP0=0, select bank0
   982  0272  1303               	bcf	3,6	;RP1=0, select bank0
   983  0273  00A4               	movwf	lcd_print@s
   984  0274  3000               	movlw	0
   985  0275  00A5               	movwf	lcd_print@s+1
   986  0276  120A  118A  24A2  120A  118A  	fcall	_lcd_print
   987                           
   988                           ;main.c: 171: INTCONbits.GIE = 1;
   989  027B  178B               	bsf	11,7	;volatile
   990  027C  2A02               	goto	l1427
   991  027D                     __end_of_main:	
   992                           
   993                           	psect	text1
   994  0039                     __ptext1:	
   995 ;; *************** function _sprintf *****************
   996 ;; Defined at:
   997 ;;		line 492 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;  sp              1    wreg     PTR unsigned char 
  1000 ;;		 -> vector(15), 
  1001 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1002 ;;		 -> STR_3(8), STR_2(16), 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  sp              1   31[BANK0 ] PTR unsigned char 
  1005 ;;		 -> vector(15), 
  1006 ;;  tmpval          4    0        struct .
  1007 ;;  width           2   29[BANK0 ] int 
  1008 ;;  val             2   27[BANK0 ] unsigned int 
  1009 ;;  cp              2    0        PTR const unsigned char 
  1010 ;;  len             2    0        unsigned int 
  1011 ;;  c               1   32[BANK0 ] char 
  1012 ;;  flag            1   26[BANK0 ] unsigned char 
  1013 ;;  prec            1   25[BANK0 ] char 
  1014 ;;  ap              1   24[BANK0 ] PTR void [1]
  1015 ;;		 -> ?_sprintf(2), 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  2   14[BANK0 ] int 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1025 ;;      Params:         0       7       0       0       0
  1026 ;;      Locals:         0       9       0       0       0
  1027 ;;      Temps:          0       3       0       0       0
  1028 ;;      Totals:         0      19       0       0       0
  1029 ;;Total ram usage:       19 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    2
  1032 ;; This function calls:
  1033 ;;		___lwdiv
  1034 ;;		___lwmod
  1035 ;;		___wmul
  1036 ;;		_isdigit
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           
  1043                           ;psect for function _sprintf
  1044  0039                     _sprintf:	
  1045                           
  1046                           ;incstack = 0
  1047                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1048                           ;sprintf@sp stored from wreg
  1049  0039  1283               	bcf	3,5	;RP0=0, select bank0
  1050  003A  1303               	bcf	3,6	;RP1=0, select bank0
  1051  003B  00BF               	movwf	sprintf@sp
  1052                           
  1053                           ;doprnt.c: 494: va_list ap;
  1054                           ;doprnt.c: 499: signed char c;
  1055                           ;doprnt.c: 501: int width;
  1056                           ;doprnt.c: 506: signed char prec;
  1057                           ;doprnt.c: 508: unsigned char flag;
  1058                           ;doprnt.c: 523: union {
  1059                           ;doprnt.c: 524: unsigned long vd;
  1060                           ;doprnt.c: 525: double integ;
  1061                           ;doprnt.c: 526: } tmpval;
  1062                           ;doprnt.c: 528: unsigned int val;
  1063                           ;doprnt.c: 529: unsigned len;
  1064                           ;doprnt.c: 530: const char * cp;
  1065                           ;doprnt.c: 533: *ap = __va_start();
  1066  003C  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1067  003D  00B5               	movwf	??_sprintf
  1068  003E  0835               	movf	??_sprintf,w
  1069  003F  00B8               	movwf	sprintf@ap
  1070  0040                     l1329:	
  1071                           ;doprnt.c: 536: while(c = *f++) {
  1072                           
  1073  0040  3001               	movlw	1
  1074  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1075  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1076  0043  07AE               	addwf	sprintf@f,f
  1077  0044  30FF               	movlw	-1
  1078  0045  072E               	addwf	sprintf@f,w
  1079  0046  0084               	movwf	4
  1080  0047  120A  118A  240A  120A  118A  	fcall	stringdir
  1081  004C  00B5               	movwf	??_sprintf
  1082  004D  0835               	movf	??_sprintf,w
  1083  004E  00C0               	movwf	sprintf@c
  1084  004F  0840               	movf	sprintf@c,w
  1085  0050  1903               	btfsc	3,2
  1086  0051  29A8               	goto	l1331
  1087                           
  1088                           ;doprnt.c: 538: if(c != '%')
  1089  0052  3025               	movlw	37
  1090  0053  0640               	xorwf	sprintf@c,w
  1091  0054  1903               	btfsc	3,2
  1092  0055  2862               	goto	l1255
  1093                           
  1094                           ;doprnt.c: 540: {
  1095                           ;doprnt.c: 541: ((*sp++ = (c)));
  1096  0056  0840               	movf	sprintf@c,w
  1097  0057  00B5               	movwf	??_sprintf
  1098  0058  083F               	movf	sprintf@sp,w
  1099  0059  0084               	movwf	4
  1100  005A  0835               	movf	??_sprintf,w
  1101  005B  1383               	bcf	3,7	;select IRP bank0
  1102  005C  0080               	movwf	0
  1103  005D  3001               	movlw	1
  1104  005E  00B5               	movwf	??_sprintf
  1105  005F  0835               	movf	??_sprintf,w
  1106  0060  07BF               	addwf	sprintf@sp,f
  1107                           
  1108                           ;doprnt.c: 542: continue;
  1109  0061  2840               	goto	l1329
  1110  0062                     l1255:	
  1111                           
  1112                           ;doprnt.c: 543: }
  1113                           ;doprnt.c: 546: width = 0;
  1114  0062  01BD               	clrf	sprintf@width
  1115  0063  01BE               	clrf	sprintf@width+1
  1116                           
  1117                           ;doprnt.c: 548: flag = 0;
  1118  0064  01BA               	clrf	sprintf@flag
  1119                           
  1120                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1121  0065  082E               	movf	sprintf@f,w
  1122  0066  0084               	movwf	4
  1123  0067  120A  118A  240A  120A  118A  	fcall	stringdir
  1124  006C  120A  118A  2533  120A  118A  	fcall	_isdigit
  1125  0071  1C03               	btfss	3,0
  1126  0072  28B1               	goto	l1271
  1127                           
  1128                           ;doprnt.c: 598: width = 0;
  1129  0073  1283               	bcf	3,5	;RP0=0, select bank0
  1130  0074  1303               	bcf	3,6	;RP1=0, select bank0
  1131  0075  01BD               	clrf	sprintf@width
  1132  0076  01BE               	clrf	sprintf@width+1
  1133  0077                     l1261:	
  1134                           ;doprnt.c: 599: do {
  1135                           
  1136                           
  1137                           ;doprnt.c: 600: width *= 10;
  1138  0077  300A               	movlw	10
  1139  0078  1283               	bcf	3,5	;RP0=0, select bank0
  1140  0079  1303               	bcf	3,6	;RP1=0, select bank0
  1141  007A  00A0               	movwf	___wmul@multiplier
  1142  007B  3000               	movlw	0
  1143  007C  00A1               	movwf	___wmul@multiplier+1
  1144  007D  083E               	movf	sprintf@width+1,w
  1145  007E  00A3               	movwf	___wmul@multiplicand+1
  1146  007F  083D               	movf	sprintf@width,w
  1147  0080  00A2               	movwf	___wmul@multiplicand
  1148  0081  120A  118A  24CA  120A  118A  	fcall	___wmul
  1149  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1150  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1151  0088  0821               	movf	?___wmul+1,w
  1152  0089  00BE               	movwf	sprintf@width+1
  1153  008A  0820               	movf	?___wmul,w
  1154  008B  00BD               	movwf	sprintf@width
  1155                           
  1156                           ;doprnt.c: 601: width += *f++ - '0';
  1157  008C  082E               	movf	sprintf@f,w
  1158  008D  0084               	movwf	4
  1159  008E  120A  118A  240A  120A  118A  	fcall	stringdir
  1160  0093  3ED0               	addlw	208
  1161  0094  00B5               	movwf	??_sprintf
  1162  0095  30FF               	movlw	255
  1163  0096  1803               	skipnc
  1164  0097  3000               	movlw	0
  1165  0098  00B6               	movwf	??_sprintf+1
  1166  0099  0835               	movf	??_sprintf,w
  1167  009A  07BD               	addwf	sprintf@width,f
  1168  009B  1803               	skipnc
  1169  009C  0ABE               	incf	sprintf@width+1,f
  1170  009D  0836               	movf	??_sprintf+1,w
  1171  009E  07BE               	addwf	sprintf@width+1,f
  1172  009F  3001               	movlw	1
  1173  00A0  00B5               	movwf	??_sprintf
  1174  00A1  0835               	movf	??_sprintf,w
  1175  00A2  07AE               	addwf	sprintf@f,f
  1176                           
  1177                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1178  00A3  082E               	movf	sprintf@f,w
  1179  00A4  0084               	movwf	4
  1180  00A5  120A  118A  240A  120A  118A  	fcall	stringdir
  1181  00AA  120A  118A  2533  120A  118A  	fcall	_isdigit
  1182  00AF  1803               	btfsc	3,0
  1183  00B0  2877               	goto	l1261
  1184  00B1                     l1271:	
  1185                           ;doprnt.c: 822: }
  1186                           
  1187                           ;doprnt.c: 813: continue;
  1188                           
  1189                           ;doprnt.c: 802: default:
  1190                           
  1191                           ;doprnt.c: 698: case 'i':
  1192                           ;doprnt.c: 699: break;
  1193                           
  1194                           ;doprnt.c: 697: case 'd':
  1195                           
  1196                           ;doprnt.c: 638: goto alldone;
  1197                           
  1198                           ;doprnt.c: 637: case 0:
  1199                           
  1200                           ;doprnt.c: 608: }
  1201                           ;doprnt.c: 635: switch(c = *f++) {
  1202                           
  1203  00B1  3001               	movlw	1
  1204  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1205  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1206  00B4  07AE               	addwf	sprintf@f,f
  1207  00B5  30FF               	movlw	-1
  1208  00B6  072E               	addwf	sprintf@f,w
  1209  00B7  0084               	movwf	4
  1210  00B8  120A  118A  240A  120A  118A  	fcall	stringdir
  1211  00BD  00C0               	movwf	sprintf@c
  1212                           
  1213                           ; Switch size 1, requested type "space"
  1214                           ; Number of cases is 3, Range of values is 0 to 105
  1215                           ; switch strategies available:
  1216                           ; Name         Instructions Cycles
  1217                           ; simple_byte           10     6 (average)
  1218                           ; jumptable            260     6 (fixed)
  1219                           ;	Chosen strategy is simple_byte
  1220  00BE  3A00               	xorlw	0	; case 0
  1221  00BF  1903               	skipnz
  1222  00C0  29A8               	goto	l1331
  1223  00C1  3A64               	xorlw	100	; case 100
  1224  00C2  1903               	skipnz
  1225  00C3  28C8               	goto	l1273
  1226  00C4  3A0D               	xorlw	13	; case 105
  1227  00C5  1903               	skipnz
  1228  00C6  28C8               	goto	l1273
  1229  00C7  2840               	goto	l1329
  1230  00C8                     l1273:	
  1231                           
  1232                           ;doprnt.c: 1253: {
  1233                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1234  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1235  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  1236  00CA  0838               	movf	sprintf@ap,w
  1237  00CB  0084               	movwf	4
  1238  00CC  1383               	bcf	3,7	;select IRP bank0
  1239  00CD  0800               	movf	0,w
  1240  00CE  00BB               	movwf	sprintf@val
  1241  00CF  0A84               	incf	4,f
  1242  00D0  0800               	movf	0,w
  1243  00D1  00BC               	movwf	sprintf@val+1
  1244  00D2  3002               	movlw	2
  1245  00D3  00B5               	movwf	??_sprintf
  1246  00D4  0835               	movf	??_sprintf,w
  1247  00D5  07B8               	addwf	sprintf@ap,f
  1248                           
  1249                           ;doprnt.c: 1261: if((int)val < 0) {
  1250  00D6  1FBC               	btfss	sprintf@val+1,7
  1251  00D7  28E1               	goto	l1283
  1252                           
  1253                           ;doprnt.c: 1262: flag |= 0x03;
  1254  00D8  3003               	movlw	3
  1255  00D9  00B5               	movwf	??_sprintf
  1256  00DA  0835               	movf	??_sprintf,w
  1257  00DB  04BA               	iorwf	sprintf@flag,f
  1258                           
  1259                           ;doprnt.c: 1263: val = -val;
  1260  00DC  09BB               	comf	sprintf@val,f
  1261  00DD  09BC               	comf	sprintf@val+1,f
  1262  00DE  0ABB               	incf	sprintf@val,f
  1263  00DF  1903               	skipnz
  1264  00E0  0ABC               	incf	sprintf@val+1,f
  1265  00E1                     l1283:	
  1266                           
  1267                           ;doprnt.c: 1264: }
  1268                           ;doprnt.c: 1266: }
  1269                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1270  00E1  01C0               	clrf	sprintf@c
  1271  00E2  0AC0               	incf	sprintf@c,f
  1272  00E3  3005               	movlw	5
  1273  00E4  0640               	xorwf	sprintf@c,w
  1274  00E5  1903               	btfsc	3,2
  1275  00E6  2908               	goto	l1295
  1276  00E7                     l1289:	
  1277                           
  1278                           ;doprnt.c: 1306: if(val < dpowers[c])
  1279  00E7  0840               	movf	sprintf@c,w
  1280  00E8  00B5               	movwf	??_sprintf
  1281  00E9  0735               	addwf	??_sprintf,w
  1282  00EA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1283  00EB  0084               	movwf	4
  1284  00EC  120A  118A  240A  120A  118A  	fcall	stringdir
  1285  00F1  00B6               	movwf	??_sprintf+1
  1286  00F2  120A  118A  240A  120A  118A  	fcall	stringdir
  1287  00F7  00B7               	movwf	??_sprintf+2
  1288  00F8  0837               	movf	??_sprintf+2,w
  1289  00F9  023C               	subwf	sprintf@val+1,w
  1290  00FA  1D03               	skipz
  1291  00FB  28FE               	goto	u885
  1292  00FC  0836               	movf	??_sprintf+1,w
  1293  00FD  023B               	subwf	sprintf@val,w
  1294  00FE                     u885:	
  1295  00FE  1C03               	btfss	3,0
  1296  00FF  2908               	goto	l1295
  1297                           
  1298                           ;doprnt.c: 1307: break;
  1299  0100  3001               	movlw	1
  1300  0101  00B5               	movwf	??_sprintf
  1301  0102  0835               	movf	??_sprintf,w
  1302  0103  07C0               	addwf	sprintf@c,f
  1303  0104  3005               	movlw	5
  1304  0105  0640               	xorwf	sprintf@c,w
  1305  0106  1D03               	btfss	3,2
  1306  0107  28E7               	goto	l1289
  1307  0108                     l1295:	
  1308                           
  1309                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1310  0108  083D               	movf	sprintf@width,w
  1311  0109  043E               	iorwf	sprintf@width+1,w
  1312  010A  1903               	btfsc	3,2
  1313  010B  2916               	goto	l215
  1314  010C  083A               	movf	sprintf@flag,w
  1315  010D  3903               	andlw	3
  1316  010E  1903               	btfsc	3,2
  1317  010F  2916               	goto	l215
  1318                           
  1319                           ;doprnt.c: 1346: width--;
  1320  0110  30FF               	movlw	255
  1321  0111  07BD               	addwf	sprintf@width,f
  1322  0112  1803               	skipnc
  1323  0113  0ABE               	incf	sprintf@width+1,f
  1324  0114  30FF               	movlw	255
  1325  0115  07BE               	addwf	sprintf@width+1,f
  1326  0116                     l215:	
  1327                           
  1328                           ;doprnt.c: 1381: if(width > c)
  1329  0116  0840               	movf	sprintf@c,w
  1330  0117  00B5               	movwf	??_sprintf
  1331  0118  01B6               	clrf	??_sprintf+1
  1332  0119  1BB5               	btfsc	??_sprintf,7
  1333  011A  03B6               	decf	??_sprintf+1,f
  1334  011B  0836               	movf	??_sprintf+1,w
  1335  011C  3A80               	xorlw	128
  1336  011D  00B7               	movwf	??_sprintf+2
  1337  011E  083E               	movf	sprintf@width+1,w
  1338  011F  3A80               	xorlw	128
  1339  0120  0237               	subwf	??_sprintf+2,w
  1340  0121  1D03               	skipz
  1341  0122  2925               	goto	u925
  1342  0123  083D               	movf	sprintf@width,w
  1343  0124  0235               	subwf	??_sprintf,w
  1344  0125                     u925:	
  1345  0125  1803               	skipnc
  1346  0126  2935               	goto	l1303
  1347                           
  1348                           ;doprnt.c: 1382: width -= c;
  1349  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0128  1303               	bcf	3,6	;RP1=0, select bank0
  1351  0129  0840               	movf	sprintf@c,w
  1352  012A  00B5               	movwf	??_sprintf
  1353  012B  01B6               	clrf	??_sprintf+1
  1354  012C  1BB5               	btfsc	??_sprintf,7
  1355  012D  03B6               	decf	??_sprintf+1,f
  1356  012E  0835               	movf	??_sprintf,w
  1357  012F  02BD               	subwf	sprintf@width,f
  1358  0130  0836               	movf	??_sprintf+1,w
  1359  0131  1C03               	skipc
  1360  0132  03BE               	decf	sprintf@width+1,f
  1361  0133  02BE               	subwf	sprintf@width+1,f
  1362  0134  2939               	goto	l1305
  1363  0135                     l1303:	
  1364                           
  1365                           ;doprnt.c: 1383: else
  1366                           ;doprnt.c: 1384: width = 0;
  1367  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1368  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1369  0137  01BD               	clrf	sprintf@width
  1370  0138  01BE               	clrf	sprintf@width+1
  1371  0139                     l1305:	
  1372                           
  1373                           ;doprnt.c: 1422: {
  1374                           ;doprnt.c: 1424: if(width
  1375                           ;doprnt.c: 1428: )
  1376  0139  083D               	movf	sprintf@width,w
  1377  013A  043E               	iorwf	sprintf@width+1,w
  1378  013B  1903               	btfsc	3,2
  1379  013C  2952               	goto	l1313
  1380  013D                     l1307:	
  1381                           ;doprnt.c: 1429: do
  1382                           
  1383                           
  1384                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1385  013D  3020               	movlw	32
  1386  013E  00B5               	movwf	??_sprintf
  1387  013F  083F               	movf	sprintf@sp,w
  1388  0140  0084               	movwf	4
  1389  0141  0835               	movf	??_sprintf,w
  1390  0142  1383               	bcf	3,7	;select IRP bank0
  1391  0143  0080               	movwf	0
  1392  0144  3001               	movlw	1
  1393  0145  00B5               	movwf	??_sprintf
  1394  0146  0835               	movf	??_sprintf,w
  1395  0147  07BF               	addwf	sprintf@sp,f
  1396                           
  1397                           ;doprnt.c: 1431: while(--width);
  1398  0148  30FF               	movlw	255
  1399  0149  07BD               	addwf	sprintf@width,f
  1400  014A  1803               	skipnc
  1401  014B  0ABE               	incf	sprintf@width+1,f
  1402  014C  30FF               	movlw	255
  1403  014D  07BE               	addwf	sprintf@width+1,f
  1404  014E  083D               	movf	sprintf@width,w
  1405  014F  043E               	iorwf	sprintf@width+1,w
  1406  0150  1D03               	btfss	3,2
  1407  0151  293D               	goto	l1307
  1408  0152                     l1313:	
  1409                           
  1410                           ;doprnt.c: 1438: if(flag & 0x03)
  1411  0152  083A               	movf	sprintf@flag,w
  1412  0153  3903               	andlw	3
  1413  0154  1903               	btfsc	3,2
  1414  0155  2961               	goto	l1319
  1415                           
  1416                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1417  0156  302D               	movlw	45
  1418  0157  00B5               	movwf	??_sprintf
  1419  0158  083F               	movf	sprintf@sp,w
  1420  0159  0084               	movwf	4
  1421  015A  0835               	movf	??_sprintf,w
  1422  015B  1383               	bcf	3,7	;select IRP bank0
  1423  015C  0080               	movwf	0
  1424  015D  3001               	movlw	1
  1425  015E  00B5               	movwf	??_sprintf
  1426  015F  0835               	movf	??_sprintf,w
  1427  0160  07BF               	addwf	sprintf@sp,f
  1428  0161                     l1319:	
  1429                           
  1430                           ;doprnt.c: 1469: }
  1431                           ;doprnt.c: 1472: prec = c;
  1432  0161  0840               	movf	sprintf@c,w
  1433  0162  00B5               	movwf	??_sprintf
  1434  0163  0835               	movf	??_sprintf,w
  1435  0164  00B9               	movwf	sprintf@prec
  1436  0165                     l1327:	
  1437                           ;doprnt.c: 1474: while(prec--) {
  1438                           
  1439  0165  30FF               	movlw	255
  1440  0166  00B5               	movwf	??_sprintf
  1441  0167  0835               	movf	??_sprintf,w
  1442  0168  07B9               	addwf	sprintf@prec,f
  1443  0169  0A39               	incf	sprintf@prec,w
  1444  016A  1903               	btfsc	3,2
  1445  016B  2840               	goto	l1329
  1446                           
  1447                           ;doprnt.c: 1478: {
  1448                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1449  016C  300A               	movlw	10
  1450  016D  00A8               	movwf	___lwmod@divisor
  1451  016E  3000               	movlw	0
  1452  016F  00A9               	movwf	___lwmod@divisor+1
  1453  0170  0839               	movf	sprintf@prec,w
  1454  0171  00B5               	movwf	??_sprintf
  1455  0172  0735               	addwf	??_sprintf,w
  1456  0173  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1457  0174  0084               	movwf	4
  1458  0175  120A  118A  240A  120A  118A  	fcall	stringdir
  1459  017A  00A0               	movwf	___lwdiv@divisor
  1460  017B  120A  118A  240A  120A  118A  	fcall	stringdir
  1461  0180  00A1               	movwf	___lwdiv@divisor+1
  1462  0181  083C               	movf	sprintf@val+1,w
  1463  0182  00A3               	movwf	___lwdiv@dividend+1
  1464  0183  083B               	movf	sprintf@val,w
  1465  0184  00A2               	movwf	___lwdiv@dividend
  1466  0185  120A  118A  23AD  120A  118A  	fcall	___lwdiv
  1467  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1468  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1469  018C  0821               	movf	?___lwdiv+1,w
  1470  018D  00AB               	movwf	___lwmod@dividend+1
  1471  018E  0820               	movf	?___lwdiv,w
  1472  018F  00AA               	movwf	___lwmod@dividend
  1473  0190  120A  118A  243B  120A  118A  	fcall	___lwmod
  1474  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1475  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1476  0197  0828               	movf	?___lwmod,w
  1477  0198  3E30               	addlw	48
  1478  0199  00B6               	movwf	??_sprintf+1
  1479  019A  0836               	movf	??_sprintf+1,w
  1480  019B  00C0               	movwf	sprintf@c
  1481                           
  1482                           ;doprnt.c: 1523: }
  1483                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1484  019C  0840               	movf	sprintf@c,w
  1485  019D  00B5               	movwf	??_sprintf
  1486  019E  083F               	movf	sprintf@sp,w
  1487  019F  0084               	movwf	4
  1488  01A0  0835               	movf	??_sprintf,w
  1489  01A1  1383               	bcf	3,7	;select IRP bank0
  1490  01A2  0080               	movwf	0
  1491  01A3  3001               	movlw	1
  1492  01A4  00B5               	movwf	??_sprintf
  1493  01A5  0835               	movf	??_sprintf,w
  1494  01A6  07BF               	addwf	sprintf@sp,f
  1495  01A7  2965               	goto	l1327
  1496  01A8                     l1331:	
  1497                           ;doprnt.c: 1525: }
  1498                           ;doprnt.c: 1533: }
  1499                           ;doprnt.c: 1535: alldone:
  1500                           
  1501                           
  1502                           ;doprnt.c: 1538: *sp = 0;
  1503  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1504  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1505  01AA  083F               	movf	sprintf@sp,w
  1506  01AB  0084               	movwf	4
  1507  01AC  1383               	bcf	3,7	;select IRP bank0
  1508  01AD  0180               	clrf	0
  1509  01AE  0008               	return
  1510  01AF                     __end_of_sprintf:	
  1511                           ;doprnt.c: 1540: return 0;
  1512                           ;	Return value of _sprintf is never used
  1513                           
  1514                           
  1515                           	psect	text2
  1516  0533                     __ptext2:	
  1517 ;; *************** function _isdigit *****************
  1518 ;; Defined at:
  1519 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  c               1    wreg     unsigned char 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  c               1    1[BANK0 ] unsigned char 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;		None               void
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1533 ;;      Params:         0       0       0       0       0
  1534 ;;      Locals:         0       2       0       0       0
  1535 ;;      Temps:          0       0       0       0       0
  1536 ;;      Totals:         0       2       0       0       0
  1537 ;;Total ram usage:        2 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    1
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_sprintf
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           
  1548                           ;psect for function _isdigit
  1549  0533                     _isdigit:	
  1550                           
  1551                           ;incstack = 0
  1552                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1553                           ;isdigit@c stored from wreg
  1554  0533  1283               	bcf	3,5	;RP0=0, select bank0
  1555  0534  1303               	bcf	3,6	;RP1=0, select bank0
  1556  0535  00A1               	movwf	isdigit@c
  1557  0536  01A0               	clrf	_isdigit$624
  1558  0537  303A               	movlw	58
  1559  0538  0221               	subwf	isdigit@c,w
  1560  0539  1803               	skipnc
  1561  053A  2D41               	goto	l1121
  1562  053B  3030               	movlw	48
  1563  053C  0221               	subwf	isdigit@c,w
  1564  053D  1C03               	skipc
  1565  053E  2D41               	goto	l1121
  1566  053F  01A0               	clrf	_isdigit$624
  1567  0540  0AA0               	incf	_isdigit$624,f
  1568  0541                     l1121:	
  1569  0541  0C20               	rrf	_isdigit$624,w
  1570  0542  0008               	return
  1571  0543                     __end_of_isdigit:	
  1572                           
  1573                           	psect	text3
  1574  04CA                     __ptext3:	
  1575 ;; *************** function ___wmul *****************
  1576 ;; Defined at:
  1577 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1580 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  product         2    4[BANK0 ] unsigned int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  2    0[BANK0 ] unsigned int 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1592 ;;      Params:         0       4       0       0       0
  1593 ;;      Locals:         0       2       0       0       0
  1594 ;;      Temps:          0       0       0       0       0
  1595 ;;      Totals:         0       6       0       0       0
  1596 ;;Total ram usage:        6 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    1
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_sprintf
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function ___wmul
  1608  04CA                     ___wmul:	
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1612  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  1613  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  1614  04CC  01A4               	clrf	___wmul@product
  1615  04CD  01A5               	clrf	___wmul@product+1
  1616  04CE                     l1127:	
  1617  04CE  1C20               	btfss	___wmul@multiplier,0
  1618  04CF  2CD6               	goto	l310
  1619  04D0  0822               	movf	___wmul@multiplicand,w
  1620  04D1  07A4               	addwf	___wmul@product,f
  1621  04D2  1803               	skipnc
  1622  04D3  0AA5               	incf	___wmul@product+1,f
  1623  04D4  0823               	movf	___wmul@multiplicand+1,w
  1624  04D5  07A5               	addwf	___wmul@product+1,f
  1625  04D6                     l310:	
  1626  04D6  3001               	movlw	1
  1627  04D7                     u655:	
  1628  04D7  1003               	clrc
  1629  04D8  0DA2               	rlf	___wmul@multiplicand,f
  1630  04D9  0DA3               	rlf	___wmul@multiplicand+1,f
  1631  04DA  3EFF               	addlw	-1
  1632  04DB  1D03               	skipz
  1633  04DC  2CD7               	goto	u655
  1634  04DD  3001               	movlw	1
  1635  04DE                     u665:	
  1636  04DE  1003               	clrc
  1637  04DF  0CA1               	rrf	___wmul@multiplier+1,f
  1638  04E0  0CA0               	rrf	___wmul@multiplier,f
  1639  04E1  3EFF               	addlw	-1
  1640  04E2  1D03               	skipz
  1641  04E3  2CDE               	goto	u665
  1642  04E4  0820               	movf	___wmul@multiplier,w
  1643  04E5  0421               	iorwf	___wmul@multiplier+1,w
  1644  04E6  1D03               	btfss	3,2
  1645  04E7  2CCE               	goto	l1127
  1646  04E8  0825               	movf	___wmul@product+1,w
  1647  04E9  00A1               	movwf	?___wmul+1
  1648  04EA  0824               	movf	___wmul@product,w
  1649  04EB  00A0               	movwf	?___wmul
  1650  04EC  0008               	return
  1651  04ED                     __end_of___wmul:	
  1652                           
  1653                           	psect	text4
  1654  043B                     __ptext4:	
  1655 ;; *************** function ___lwmod *****************
  1656 ;; Defined at:
  1657 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  divisor         2    8[BANK0 ] unsigned int 
  1660 ;;  dividend        2   10[BANK0 ] unsigned int 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  counter         1   13[BANK0 ] unsigned char 
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  2    8[BANK0 ] unsigned int 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1672 ;;      Params:         0       4       0       0       0
  1673 ;;      Locals:         0       1       0       0       0
  1674 ;;      Temps:          0       1       0       0       0
  1675 ;;      Totals:         0       6       0       0       0
  1676 ;;Total ram usage:        6 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    1
  1679 ;; This function calls:
  1680 ;;		Nothing
  1681 ;; This function is called by:
  1682 ;;		_sprintf
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           
  1687                           ;psect for function ___lwmod
  1688  043B                     ___lwmod:	
  1689                           
  1690                           ;incstack = 0
  1691                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1692  043B  1283               	bcf	3,5	;RP0=0, select bank0
  1693  043C  1303               	bcf	3,6	;RP1=0, select bank0
  1694  043D  0828               	movf	___lwmod@divisor,w
  1695  043E  0429               	iorwf	___lwmod@divisor+1,w
  1696  043F  1903               	btfsc	3,2
  1697  0440  2C6A               	goto	l1183
  1698  0441  01AD               	clrf	___lwmod@counter
  1699  0442  0AAD               	incf	___lwmod@counter,f
  1700  0443                     l1173:	
  1701  0443  1BA9               	btfsc	___lwmod@divisor+1,7
  1702  0444  2C51               	goto	l1175
  1703  0445  3001               	movlw	1
  1704  0446                     u765:	
  1705  0446  1003               	clrc
  1706  0447  0DA8               	rlf	___lwmod@divisor,f
  1707  0448  0DA9               	rlf	___lwmod@divisor+1,f
  1708  0449  3EFF               	addlw	-1
  1709  044A  1D03               	skipz
  1710  044B  2C46               	goto	u765
  1711  044C  3001               	movlw	1
  1712  044D  00AC               	movwf	??___lwmod
  1713  044E  082C               	movf	??___lwmod,w
  1714  044F  07AD               	addwf	___lwmod@counter,f
  1715  0450  2C43               	goto	l1173
  1716  0451                     l1175:	
  1717  0451  0829               	movf	___lwmod@divisor+1,w
  1718  0452  022B               	subwf	___lwmod@dividend+1,w
  1719  0453  1D03               	skipz
  1720  0454  2C57               	goto	u785
  1721  0455  0828               	movf	___lwmod@divisor,w
  1722  0456  022A               	subwf	___lwmod@dividend,w
  1723  0457                     u785:	
  1724  0457  1C03               	skipc
  1725  0458  2C5F               	goto	l1179
  1726  0459  0828               	movf	___lwmod@divisor,w
  1727  045A  02AA               	subwf	___lwmod@dividend,f
  1728  045B  0829               	movf	___lwmod@divisor+1,w
  1729  045C  1C03               	skipc
  1730  045D  03AB               	decf	___lwmod@dividend+1,f
  1731  045E  02AB               	subwf	___lwmod@dividend+1,f
  1732  045F                     l1179:	
  1733  045F  3001               	movlw	1
  1734  0460                     u795:	
  1735  0460  1003               	clrc
  1736  0461  0CA9               	rrf	___lwmod@divisor+1,f
  1737  0462  0CA8               	rrf	___lwmod@divisor,f
  1738  0463  3EFF               	addlw	-1
  1739  0464  1D03               	skipz
  1740  0465  2C60               	goto	u795
  1741  0466  3001               	movlw	1
  1742  0467  02AD               	subwf	___lwmod@counter,f
  1743  0468  1D03               	btfss	3,2
  1744  0469  2C51               	goto	l1175
  1745  046A                     l1183:	
  1746  046A  082B               	movf	___lwmod@dividend+1,w
  1747  046B  00A9               	movwf	?___lwmod+1
  1748  046C  082A               	movf	___lwmod@dividend,w
  1749  046D  00A8               	movwf	?___lwmod
  1750  046E  0008               	return
  1751  046F                     __end_of___lwmod:	
  1752                           
  1753                           	psect	text5
  1754  03AD                     __ptext5:	
  1755 ;; *************** function ___lwdiv *****************
  1756 ;; Defined at:
  1757 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  divisor         2    0[BANK0 ] unsigned int 
  1760 ;;  dividend        2    2[BANK0 ] unsigned int 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  quotient        2    5[BANK0 ] unsigned int 
  1763 ;;  counter         1    7[BANK0 ] unsigned char 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  2    0[BANK0 ] unsigned int 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, status,0
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1773 ;;      Params:         0       4       0       0       0
  1774 ;;      Locals:         0       3       0       0       0
  1775 ;;      Temps:          0       1       0       0       0
  1776 ;;      Totals:         0       8       0       0       0
  1777 ;;Total ram usage:        8 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    1
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_sprintf
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function ___lwdiv
  1789  03AD                     ___lwdiv:	
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1793  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  1794  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  1795  03AF  01A5               	clrf	___lwdiv@quotient
  1796  03B0  01A6               	clrf	___lwdiv@quotient+1
  1797  03B1  0820               	movf	___lwdiv@divisor,w
  1798  03B2  0421               	iorwf	___lwdiv@divisor+1,w
  1799  03B3  1903               	btfsc	3,2
  1800  03B4  2BE6               	goto	l1161
  1801  03B5  01A7               	clrf	___lwdiv@counter
  1802  03B6  0AA7               	incf	___lwdiv@counter,f
  1803  03B7                     l1149:	
  1804  03B7  1BA1               	btfsc	___lwdiv@divisor+1,7
  1805  03B8  2BC5               	goto	l1151
  1806  03B9  3001               	movlw	1
  1807  03BA                     u695:	
  1808  03BA  1003               	clrc
  1809  03BB  0DA0               	rlf	___lwdiv@divisor,f
  1810  03BC  0DA1               	rlf	___lwdiv@divisor+1,f
  1811  03BD  3EFF               	addlw	-1
  1812  03BE  1D03               	skipz
  1813  03BF  2BBA               	goto	u695
  1814  03C0  3001               	movlw	1
  1815  03C1  00A4               	movwf	??___lwdiv
  1816  03C2  0824               	movf	??___lwdiv,w
  1817  03C3  07A7               	addwf	___lwdiv@counter,f
  1818  03C4  2BB7               	goto	l1149
  1819  03C5                     l1151:	
  1820  03C5  3001               	movlw	1
  1821  03C6                     u715:	
  1822  03C6  1003               	clrc
  1823  03C7  0DA5               	rlf	___lwdiv@quotient,f
  1824  03C8  0DA6               	rlf	___lwdiv@quotient+1,f
  1825  03C9  3EFF               	addlw	-1
  1826  03CA  1D03               	skipz
  1827  03CB  2BC6               	goto	u715
  1828  03CC  0821               	movf	___lwdiv@divisor+1,w
  1829  03CD  0223               	subwf	___lwdiv@dividend+1,w
  1830  03CE  1D03               	skipz
  1831  03CF  2BD2               	goto	u725
  1832  03D0  0820               	movf	___lwdiv@divisor,w
  1833  03D1  0222               	subwf	___lwdiv@dividend,w
  1834  03D2                     u725:	
  1835  03D2  1C03               	skipc
  1836  03D3  2BDB               	goto	l1157
  1837  03D4  0820               	movf	___lwdiv@divisor,w
  1838  03D5  02A2               	subwf	___lwdiv@dividend,f
  1839  03D6  0821               	movf	___lwdiv@divisor+1,w
  1840  03D7  1C03               	skipc
  1841  03D8  03A3               	decf	___lwdiv@dividend+1,f
  1842  03D9  02A3               	subwf	___lwdiv@dividend+1,f
  1843  03DA  1425               	bsf	___lwdiv@quotient,0
  1844  03DB                     l1157:	
  1845  03DB  3001               	movlw	1
  1846  03DC                     u735:	
  1847  03DC  1003               	clrc
  1848  03DD  0CA1               	rrf	___lwdiv@divisor+1,f
  1849  03DE  0CA0               	rrf	___lwdiv@divisor,f
  1850  03DF  3EFF               	addlw	-1
  1851  03E0  1D03               	skipz
  1852  03E1  2BDC               	goto	u735
  1853  03E2  3001               	movlw	1
  1854  03E3  02A7               	subwf	___lwdiv@counter,f
  1855  03E4  1D03               	btfss	3,2
  1856  03E5  2BC5               	goto	l1151
  1857  03E6                     l1161:	
  1858  03E6  0826               	movf	___lwdiv@quotient+1,w
  1859  03E7  00A1               	movwf	?___lwdiv+1
  1860  03E8  0825               	movf	___lwdiv@quotient,w
  1861  03E9  00A0               	movwf	?___lwdiv
  1862  03EA  0008               	return
  1863  03EB                     __end_of___lwdiv:	
  1864                           
  1865                           	psect	text6
  1866  046F                     __ptext6:	
  1867 ;; *************** function _pwmupdate *****************
  1868 ;; Defined at:
  1869 ;;		line 176 in file "main.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1883 ;;      Params:         0       0       0       0       0
  1884 ;;      Locals:         0       0       0       0       0
  1885 ;;      Temps:          0       3       0       0       0
  1886 ;;      Totals:         0       3       0       0       0
  1887 ;;Total ram usage:        3 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    1
  1890 ;; This function calls:
  1891 ;;		Nothing
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function _pwmupdate
  1899  046F                     _pwmupdate:	
  1900                           
  1901                           ;main.c: 178: encpwmmode = (PORTCbits.RC0 << 1) | PORTCbits.RC1;
  1902                           
  1903                           ;incstack = 0
  1904                           ; Regs used in _pwmupdate: [wreg-fsr0h+status,2+status,0]
  1905  046F  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0470  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0471  0C07               	rrf	7,w	;volatile
  1908  0472  3901               	andlw	1
  1909  0473  00A0               	movwf	??_pwmupdate
  1910  0474  0807               	movf	7,w	;volatile
  1911  0475  3901               	andlw	1
  1912  0476  00A1               	movwf	??_pwmupdate+1
  1913  0477  0721               	addwf	??_pwmupdate+1,w
  1914  0478  0420               	iorwf	??_pwmupdate,w
  1915  0479  00A2               	movwf	??_pwmupdate+2
  1916  047A  0822               	movf	??_pwmupdate+2,w
  1917  047B  00D8               	movwf	_encpwmmode
  1918                           
  1919                           ;main.c: 179: if (PORTBbits.RB7)
  1920  047C  1F86               	btfss	6,7	;volatile
  1921  047D  0008               	return
  1922  047E  2C92               	goto	l1245
  1923  047F                     l1235:	
  1924                           ;main.c: 182: {
  1925                           ;main.c: 183: case 0:
  1926                           
  1927                           ;main.c: 180: {
  1928                           ;main.c: 181: switch (encpwmmode)
  1929                           
  1930                           
  1931                           ;main.c: 184: pwmr=0;
  1932  047F  01FD               	clrf	_pwmr
  1933                           
  1934                           ;main.c: 185: pwmg=0;
  1935  0480  01FC               	clrf	_pwmg
  1936                           
  1937                           ;main.c: 186: pwmb=0;
  1938  0481  01C8               	clrf	_pwmb
  1939                           
  1940                           ;main.c: 187: break;
  1941  0482  0008               	return
  1942  0483                     l1237:	
  1943                           ;main.c: 188: case 1:
  1944                           
  1945                           
  1946                           ;main.c: 189: pwmr = paso;
  1947  0483  0859               	movf	_paso,w
  1948  0484  00A0               	movwf	??_pwmupdate
  1949  0485  0820               	movf	??_pwmupdate,w
  1950  0486  00FD               	movwf	_pwmr
  1951                           
  1952                           ;main.c: 190: break;
  1953  0487  0008               	return
  1954  0488                     l1239:	
  1955                           ;main.c: 191: case 2:
  1956                           
  1957                           
  1958                           ;main.c: 192: pwmg = paso;
  1959  0488  0859               	movf	_paso,w
  1960  0489  00A0               	movwf	??_pwmupdate
  1961  048A  0820               	movf	??_pwmupdate,w
  1962  048B  00FC               	movwf	_pwmg
  1963                           
  1964                           ;main.c: 193: break;
  1965  048C  0008               	return
  1966  048D                     l1241:	
  1967                           ;main.c: 194: case 3:
  1968                           
  1969                           
  1970                           ;main.c: 195: pwmb = paso;
  1971  048D  0859               	movf	_paso,w
  1972  048E  00A0               	movwf	??_pwmupdate
  1973  048F  0820               	movf	??_pwmupdate,w
  1974  0490  00C8               	movwf	_pwmb
  1975                           
  1976                           ;main.c: 197: }
  1977                           
  1978                           ;main.c: 196: break;
  1979  0491  0008               	return
  1980  0492                     l1245:	
  1981  0492  0858               	movf	_encpwmmode,w
  1982                           
  1983                           ; Switch size 1, requested type "space"
  1984                           ; Number of cases is 4, Range of values is 0 to 3
  1985                           ; switch strategies available:
  1986                           ; Name         Instructions Cycles
  1987                           ; simple_byte           13     7 (average)
  1988                           ; direct_byte           20     8 (fixed)
  1989                           ; jumptable            260     6 (fixed)
  1990                           ;	Chosen strategy is simple_byte
  1991  0493  3A00               	xorlw	0	; case 0
  1992  0494  1903               	skipnz
  1993  0495  2C7F               	goto	l1235
  1994  0496  3A01               	xorlw	1	; case 1
  1995  0497  1903               	skipnz
  1996  0498  2C83               	goto	l1237
  1997  0499  3A03               	xorlw	3	; case 2
  1998  049A  1903               	skipnz
  1999  049B  2C88               	goto	l1239
  2000  049C  3A01               	xorlw	1	; case 3
  2001  049D  1903               	skipnz
  2002  049E  2C8D               	goto	l1241
  2003  049F  2CA1               	goto	l116
  2004  04A0  0008               	return
  2005  04A1                     l116:	
  2006  04A1  0008               	return
  2007  04A2                     __end_of_pwmupdate:	
  2008                           
  2009                           	psect	text7
  2010  04ED                     __ptext7:	
  2011 ;; *************** function _lcd_setCursor *****************
  2012 ;; Defined at:
  2013 ;;		line 76 in file "drv_lcd.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;  columna         2    3[BANK0 ] unsigned int 
  2016 ;;  fila            2    5[BANK0 ] unsigned int 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;		None
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0, pclath, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2028 ;;      Params:         0       4       0       0       0
  2029 ;;      Locals:         0       0       0       0       0
  2030 ;;      Temps:          0       0       0       0       0
  2031 ;;      Totals:         0       4       0       0       0
  2032 ;;Total ram usage:        4 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    3
  2035 ;; This function calls:
  2036 ;;		_lcd_write
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           
  2043                           ;psect for function _lcd_setCursor
  2044  04ED                     _lcd_setCursor:	
  2045                           
  2046                           ;drv_lcd.c: 77: PORTAbits.RA0 = 0;
  2047                           
  2048                           ;incstack = 0
  2049                           ; Regs used in _lcd_setCursor: [wreg+status,2+status,0+pclath+cstack]
  2050  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2051  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2052  04EF  1005               	bcf	5,0	;volatile
  2053                           
  2054                           ;drv_lcd.c: 78: if (fila == 0) {
  2055  04F0  0825               	movf	lcd_setCursor@fila,w
  2056  04F1  0426               	iorwf	lcd_setCursor@fila+1,w
  2057  04F2  1D03               	btfss	3,2
  2058  04F3  2CFA               	goto	l1341
  2059                           
  2060                           ;drv_lcd.c: 79: lcd_write(0x80 + columna);
  2061  04F4  0823               	movf	lcd_setCursor@columna,w
  2062  04F5  3E80               	addlw	128
  2063  04F6  120A  118A  2364   	fcall	_lcd_write
  2064                           
  2065                           ;drv_lcd.c: 80: } else if (fila == 1) {
  2066  04F9  0008               	return
  2067  04FA                     l1341:	
  2068  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  2069  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  2070  04FC  0325               	decf	lcd_setCursor@fila,w
  2071  04FD  0426               	iorwf	lcd_setCursor@fila+1,w
  2072  04FE  1D03               	btfss	3,2
  2073  04FF  0008               	return
  2074                           
  2075                           ;drv_lcd.c: 81: lcd_write(0xC0 + columna);
  2076  0500  0823               	movf	lcd_setCursor@columna,w
  2077  0501  3EC0               	addlw	192
  2078  0502  120A  118A  2364   	fcall	_lcd_write
  2079  0505  0008               	return
  2080  0506                     __end_of_lcd_setCursor:	
  2081                           
  2082                           	psect	text8
  2083  04A2                     __ptext8:	
  2084 ;; *************** function _lcd_print *****************
  2085 ;; Defined at:
  2086 ;;		line 62 in file "drv_lcd.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  s               2    4[BANK0 ] PTR const unsigned char 
  2089 ;;		 -> vector(15), STR_1(9), 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;  cs              1    7[BANK0 ] unsigned char 
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      unsigned char 
  2094 ;; Registers used:
  2095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2101 ;;      Params:         0       2       0       0       0
  2102 ;;      Locals:         0       1       0       0       0
  2103 ;;      Temps:          0       1       0       0       0
  2104 ;;      Totals:         0       4       0       0       0
  2105 ;;Total ram usage:        4 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    4
  2108 ;; This function calls:
  2109 ;;		_lcd_putch
  2110 ;; This function is called by:
  2111 ;;		_main
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _lcd_print
  2117  04A2                     _lcd_print:	
  2118                           
  2119                           ;drv_lcd.c: 63: unsigned char cs = 0;
  2120                           
  2121                           ;incstack = 0
  2122                           ; Regs used in _lcd_print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2123  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2124  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2125  04A4  01A7               	clrf	lcd_print@cs
  2126  04A5                     l1227:	
  2127                           ;drv_lcd.c: 64: while (*s) {
  2128                           
  2129  04A5  0825               	movf	lcd_print@s+1,w
  2130  04A6  00FF               	movwf	127
  2131  04A7  0824               	movf	lcd_print@s,w
  2132  04A8  0084               	movwf	4
  2133  04A9  120A  118A  2400  120A  118A  	fcall	stringtab
  2134  04AE  3A00               	xorlw	0
  2135  04AF  1903               	btfsc	3,2
  2136  04B0  0008               	return
  2137                           
  2138                           ;drv_lcd.c: 65: lcd_putch(*s++);
  2139  04B1  0825               	movf	lcd_print@s+1,w
  2140  04B2  00FF               	movwf	127
  2141  04B3  0824               	movf	lcd_print@s,w
  2142  04B4  0084               	movwf	4
  2143  04B5  120A  118A  2400  120A  118A  	fcall	stringtab
  2144  04BA  120A  118A  2543  120A  118A  	fcall	_lcd_putch
  2145  04BF  3001               	movlw	1
  2146  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2147  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2148  04C2  07A4               	addwf	lcd_print@s,f
  2149  04C3  1803               	skipnc
  2150  04C4  0AA5               	incf	lcd_print@s+1,f
  2151                           
  2152                           ;drv_lcd.c: 66: cs++;
  2153  04C5  3001               	movlw	1
  2154  04C6  00A6               	movwf	??_lcd_print
  2155  04C7  0826               	movf	??_lcd_print,w
  2156  04C8  07A7               	addwf	lcd_print@cs,f
  2157  04C9  2CA5               	goto	l1227
  2158  04CA                     __end_of_lcd_print:	
  2159                           ;drv_lcd.c: 67: }
  2160                           ;drv_lcd.c: 68: return cs;
  2161                           ;	Return value of _lcd_print is never used
  2162                           
  2163                           
  2164                           	psect	text9
  2165  0543                     __ptext9:	
  2166 ;; *************** function _lcd_putch *****************
  2167 ;; Defined at:
  2168 ;;		line 71 in file "drv_lcd.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  c               1    wreg     unsigned char 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  c               1    3[BANK0 ] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2182 ;;      Params:         0       0       0       0       0
  2183 ;;      Locals:         0       1       0       0       0
  2184 ;;      Temps:          0       0       0       0       0
  2185 ;;      Totals:         0       1       0       0       0
  2186 ;;Total ram usage:        1 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    3
  2189 ;; This function calls:
  2190 ;;		_lcd_write
  2191 ;; This function is called by:
  2192 ;;		_lcd_print
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _lcd_putch
  2198  0543                     _lcd_putch:	
  2199                           
  2200                           ;incstack = 0
  2201                           ; Regs used in _lcd_putch: [wreg+status,2+status,0+pclath+cstack]
  2202                           ;lcd_putch@c stored from wreg
  2203  0543  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0544  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0545  00A3               	movwf	lcd_putch@c
  2206                           
  2207                           ;drv_lcd.c: 72: PORTAbits.RA0 = 1;
  2208  0546  1405               	bsf	5,0	;volatile
  2209                           
  2210                           ;drv_lcd.c: 73: lcd_write(c);
  2211  0547  0823               	movf	lcd_putch@c,w
  2212  0548  120A  118A  2364   	fcall	_lcd_write
  2213  054B  0008               	return
  2214  054C                     __end_of_lcd_putch:	
  2215                           
  2216                           	psect	text10
  2217  0300                     __ptext10:	
  2218 ;; *************** function _lcd_init *****************
  2219 ;; Defined at:
  2220 ;;		line 85 in file "drv_lcd.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0, pclath, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       0       0       0       0
  2235 ;;      Locals:         0       0       0       0       0
  2236 ;;      Temps:          0       3       0       0       0
  2237 ;;      Totals:         0       3       0       0       0
  2238 ;;Total ram usage:        3 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    3
  2241 ;; This function calls:
  2242 ;;		_Lcd_Port
  2243 ;;		_lcd_write
  2244 ;; This function is called by:
  2245 ;;		_main
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           
  2250                           ;psect for function _lcd_init
  2251  0300                     _lcd_init:	
  2252                           
  2253                           ;drv_lcd.c: 86: _delay((unsigned long)((100)*(20000000/4000.0)));
  2254                           
  2255                           ;incstack = 0
  2256                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  2257  0300  3003               	movlw	3
  2258  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2259  0302  1303               	bcf	3,6	;RP1=0, select bank0
  2260  0303  00A5               	movwf	??_lcd_init+2
  2261  0304  308A               	movlw	138
  2262  0305  00A4               	movwf	??_lcd_init+1
  2263  0306  3055               	movlw	85
  2264  0307  00A3               	movwf	??_lcd_init
  2265  0308                     u1127:	
  2266  0308  0BA3               	decfsz	??_lcd_init,f
  2267  0309  2B08               	goto	u1127
  2268  030A  0BA4               	decfsz	??_lcd_init+1,f
  2269  030B  2B08               	goto	u1127
  2270  030C  0BA5               	decfsz	??_lcd_init+2,f
  2271  030D  2B08               	goto	u1127
  2272                           
  2273                           ;drv_lcd.c: 88: Lcd_Port(0x2);
  2274  030E  3002               	movlw	2
  2275  030F  120A  118A  2506  120A  118A  	fcall	_Lcd_Port
  2276                           
  2277                           ;drv_lcd.c: 90: PORTAbits.RA1 = 1;
  2278  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2279  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2280  0316  1485               	bsf	5,1	;volatile
  2281                           
  2282                           ;drv_lcd.c: 91: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2283  0317  3002               	movlw	2
  2284  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0319  1303               	bcf	3,6	;RP1=0, select bank0
  2286  031A  00A3               	movwf	??_lcd_init
  2287  031B                     u1137:	
  2288  031B  0BA3               	decfsz	??_lcd_init,f
  2289  031C  2B1B               	goto	u1137
  2290  031D  0000               	nop
  2291                           
  2292                           ;drv_lcd.c: 93: PORTAbits.RA1 = 0;
  2293  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2294  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2295  0320  1085               	bcf	5,1	;volatile
  2296                           
  2297                           ;drv_lcd.c: 94: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2298  0321  3002               	movlw	2
  2299  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2300  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2301  0324  00A3               	movwf	??_lcd_init
  2302  0325                     u1147:	
  2303  0325  0BA3               	decfsz	??_lcd_init,f
  2304  0326  2B25               	goto	u1147
  2305  0327  0000               	nop
  2306                           
  2307                           ;drv_lcd.c: 96: Lcd_Port(0xC);
  2308  0328  300C               	movlw	12
  2309  0329  120A  118A  2506  120A  118A  	fcall	_Lcd_Port
  2310                           
  2311                           ;drv_lcd.c: 98: PORTAbits.RA1 = 1;
  2312  032E  1283               	bcf	3,5	;RP0=0, select bank0
  2313  032F  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0330  1485               	bsf	5,1	;volatile
  2315                           
  2316                           ;drv_lcd.c: 99: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2317  0331  3002               	movlw	2
  2318  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2319  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2320  0334  00A3               	movwf	??_lcd_init
  2321  0335                     u1157:	
  2322  0335  0BA3               	decfsz	??_lcd_init,f
  2323  0336  2B35               	goto	u1157
  2324  0337  0000               	nop
  2325                           
  2326                           ;drv_lcd.c: 100: PORTAbits.RA1 = 0;
  2327  0338  1283               	bcf	3,5	;RP0=0, select bank0
  2328  0339  1303               	bcf	3,6	;RP1=0, select bank0
  2329  033A  1085               	bcf	5,1	;volatile
  2330                           
  2331                           ;drv_lcd.c: 102: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2332  033B  3052               	movlw	82
  2333  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2334  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2335  033E  00A3               	movwf	??_lcd_init
  2336  033F                     u1167:	
  2337  033F  0BA3               	decfsz	??_lcd_init,f
  2338  0340  2B3F               	goto	u1167
  2339  0341  0000               	nop
  2340                           
  2341                           ;drv_lcd.c: 103: lcd_write(0xC);
  2342  0342  300C               	movlw	12
  2343  0343  120A  118A  2364  120A  118A  	fcall	_lcd_write
  2344                           
  2345                           ;drv_lcd.c: 105: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2346  0348  3052               	movlw	82
  2347  0349  1283               	bcf	3,5	;RP0=0, select bank0
  2348  034A  1303               	bcf	3,6	;RP1=0, select bank0
  2349  034B  00A3               	movwf	??_lcd_init
  2350  034C                     u1177:	
  2351  034C  0BA3               	decfsz	??_lcd_init,f
  2352  034D  2B4C               	goto	u1177
  2353  034E  0000               	nop
  2354                           
  2355                           ;drv_lcd.c: 106: lcd_write(0x1);
  2356  034F  3001               	movlw	1
  2357  0350  120A  118A  2364  120A  118A  	fcall	_lcd_write
  2358                           
  2359                           ;drv_lcd.c: 108: _delay((unsigned long)((2)*(20000000/4000.0)));
  2360  0355  300D               	movlw	13
  2361  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2362  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2363  0358  00A4               	movwf	??_lcd_init+1
  2364  0359  30FB               	movlw	251
  2365  035A  00A3               	movwf	??_lcd_init
  2366  035B                     u1187:	
  2367  035B  0BA3               	decfsz	??_lcd_init,f
  2368  035C  2B5B               	goto	u1187
  2369  035D  0BA4               	decfsz	??_lcd_init+1,f
  2370  035E  2B5B               	goto	u1187
  2371                           
  2372                           ;drv_lcd.c: 109: lcd_write(0x6);
  2373  035F  3006               	movlw	6
  2374  0360  120A  118A  2364   	fcall	_lcd_write
  2375  0363  0008               	return
  2376  0364                     __end_of_lcd_init:	
  2377                           
  2378                           	psect	text11
  2379  051E                     __ptext11:	
  2380 ;; *************** function _lcd_clear *****************
  2381 ;; Defined at:
  2382 ;;		line 56 in file "drv_lcd.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0, pclath, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2396 ;;      Params:         0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0
  2398 ;;      Temps:          0       2       0       0       0
  2399 ;;      Totals:         0       2       0       0       0
  2400 ;;Total ram usage:        2 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    3
  2403 ;; This function calls:
  2404 ;;		_lcd_write
  2405 ;; This function is called by:
  2406 ;;		_main
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           
  2411                           ;psect for function _lcd_clear
  2412  051E                     _lcd_clear:	
  2413                           
  2414                           ;drv_lcd.c: 57: PORTAbits.RA0 = 0;
  2415                           
  2416                           ;incstack = 0
  2417                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  2418  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2419  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0520  1005               	bcf	5,0	;volatile
  2421                           
  2422                           ;drv_lcd.c: 58: lcd_write(0x1);
  2423  0521  3001               	movlw	1
  2424  0522  120A  118A  2364  120A  118A  	fcall	_lcd_write
  2425                           
  2426                           ;drv_lcd.c: 59: _delay((unsigned long)((5)*(20000000/4000.0)));
  2427  0527  3021               	movlw	33
  2428  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2429  0529  1303               	bcf	3,6	;RP1=0, select bank0
  2430  052A  00A4               	movwf	??_lcd_clear+1
  2431  052B  3075               	movlw	117
  2432  052C  00A3               	movwf	??_lcd_clear
  2433  052D                     u1197:	
  2434  052D  0BA3               	decfsz	??_lcd_clear,f
  2435  052E  2D2D               	goto	u1197
  2436  052F  0BA4               	decfsz	??_lcd_clear+1,f
  2437  0530  2D2D               	goto	u1197
  2438  0531  2D32               	nop2
  2439  0532  0008               	return
  2440  0533                     __end_of_lcd_clear:	
  2441                           
  2442                           	psect	text12
  2443  0364                     __ptext12:	
  2444 ;; *************** function _lcd_write *****************
  2445 ;; Defined at:
  2446 ;;		line 32 in file "drv_lcd.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;  c               1    wreg     unsigned char 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  c               1    2[BANK0 ] unsigned char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  1    wreg      void 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0, pclath, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2460 ;;      Params:         0       0       0       0       0
  2461 ;;      Locals:         0       1       0       0       0
  2462 ;;      Temps:          0       1       0       0       0
  2463 ;;      Totals:         0       2       0       0       0
  2464 ;;Total ram usage:        2 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    2
  2467 ;; This function calls:
  2468 ;;		_Lcd_Port
  2469 ;; This function is called by:
  2470 ;;		_main
  2471 ;;		_lcd_clear
  2472 ;;		_lcd_putch
  2473 ;;		_lcd_setCursor
  2474 ;;		_lcd_init
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           
  2479                           ;psect for function _lcd_write
  2480  0364                     _lcd_write:	
  2481                           
  2482                           ;incstack = 0
  2483                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  2484                           ;lcd_write@c stored from wreg
  2485  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2486  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2487  0366  00A2               	movwf	lcd_write@c
  2488                           
  2489                           ;drv_lcd.c: 33: Lcd_Port(c >> 4);
  2490  0367  0822               	movf	lcd_write@c,w
  2491  0368  00A1               	movwf	??_lcd_write
  2492  0369  3004               	movlw	4
  2493  036A                     u615:	
  2494  036A  1003               	clrc
  2495  036B  0CA1               	rrf	??_lcd_write,f
  2496  036C  3EFF               	addlw	-1
  2497  036D  1D03               	skipz
  2498  036E  2B6A               	goto	u615
  2499  036F  0821               	movf	??_lcd_write,w
  2500  0370  120A  118A  2506  120A  118A  	fcall	_Lcd_Port
  2501                           
  2502                           ;drv_lcd.c: 35: _delay((unsigned long)((5)*(20000000/4000000.0)));
  2503  0375  3007               	movlw	7
  2504  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2505  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2506  0378  00A1               	movwf	??_lcd_write
  2507  0379                     u1207:	
  2508  0379  0BA1               	decfsz	??_lcd_write,f
  2509  037A  2B79               	goto	u1207
  2510  037B  0000               	nop
  2511                           
  2512                           ;drv_lcd.c: 37: PORTAbits.RA1 = 1;
  2513  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2514  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2515  037E  1485               	bsf	5,1	;volatile
  2516                           
  2517                           ;drv_lcd.c: 39: _delay((unsigned long)((5)*(20000000/4000000.0)));
  2518  037F  3007               	movlw	7
  2519  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2520  0381  1303               	bcf	3,6	;RP1=0, select bank0
  2521  0382  00A1               	movwf	??_lcd_write
  2522  0383                     u1217:	
  2523  0383  0BA1               	decfsz	??_lcd_write,f
  2524  0384  2B83               	goto	u1217
  2525  0385  0000               	nop
  2526                           
  2527                           ;drv_lcd.c: 41: PORTAbits.RA1 = 0;
  2528  0386  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0387  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0388  1085               	bcf	5,1	;volatile
  2531                           
  2532                           ;drv_lcd.c: 43: Lcd_Port(c & 0x0F);
  2533  0389  0822               	movf	lcd_write@c,w
  2534  038A  390F               	andlw	15
  2535  038B  120A  118A  2506  120A  118A  	fcall	_Lcd_Port
  2536                           
  2537                           ;drv_lcd.c: 45: _delay((unsigned long)((5)*(20000000/4000000.0)));
  2538  0390  3007               	movlw	7
  2539  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0393  00A1               	movwf	??_lcd_write
  2542  0394                     u1227:	
  2543  0394  0BA1               	decfsz	??_lcd_write,f
  2544  0395  2B94               	goto	u1227
  2545  0396  0000               	nop
  2546                           
  2547                           ;drv_lcd.c: 47: PORTAbits.RA1 = 1;
  2548  0397  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0398  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0399  1485               	bsf	5,1	;volatile
  2551                           
  2552                           ;drv_lcd.c: 49: _delay((unsigned long)((5)*(20000000/4000000.0)));
  2553  039A  3007               	movlw	7
  2554  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2555  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2556  039D  00A1               	movwf	??_lcd_write
  2557  039E                     u1237:	
  2558  039E  0BA1               	decfsz	??_lcd_write,f
  2559  039F  2B9E               	goto	u1237
  2560  03A0  0000               	nop
  2561                           
  2562                           ;drv_lcd.c: 51: PORTAbits.RA1 = 0;
  2563  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2564  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2565  03A3  1085               	bcf	5,1	;volatile
  2566                           
  2567                           ;drv_lcd.c: 52: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2568  03A4  30C7               	movlw	199
  2569  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2570  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2571  03A7  00A1               	movwf	??_lcd_write
  2572  03A8                     u1247:	
  2573  03A8  2BA9               	nop2
  2574  03A9  0BA1               	decfsz	??_lcd_write,f
  2575  03AA  2BA8               	goto	u1247
  2576  03AB  2BAC               	nop2
  2577  03AC  0008               	return
  2578  03AD                     __end_of_lcd_write:	
  2579                           
  2580                           	psect	text13
  2581  0506                     __ptext13:	
  2582 ;; *************** function _Lcd_Port *****************
  2583 ;; Defined at:
  2584 ;;		line 5 in file "drv_lcd.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  a               1    wreg     unsigned char 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  a               1    0[BANK0 ] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         0       0       0       0       0
  2599 ;;      Locals:         0       1       0       0       0
  2600 ;;      Temps:          0       0       0       0       0
  2601 ;;      Totals:         0       1       0       0       0
  2602 ;;Total ram usage:        1 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    1
  2605 ;; This function calls:
  2606 ;;		Nothing
  2607 ;; This function is called by:
  2608 ;;		_lcd_write
  2609 ;;		_lcd_init
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _Lcd_Port
  2615  0506                     _Lcd_Port:	
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _Lcd_Port: [wreg]
  2619                           ;Lcd_Port@a stored from wreg
  2620  0506  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0507  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0508  00A0               	movwf	Lcd_Port@a
  2623                           
  2624                           ;drv_lcd.c: 6: if (a & 1) {
  2625  0509  1C20               	btfss	Lcd_Port@a,0
  2626  050A  2D0D               	goto	l127
  2627                           
  2628                           ;drv_lcd.c: 7: PORTAbits.RA2 = 1;
  2629  050B  1505               	bsf	5,2	;volatile
  2630                           
  2631                           ;drv_lcd.c: 8: } else {
  2632  050C  2D0E               	goto	l128
  2633  050D                     l127:	
  2634                           
  2635                           ;drv_lcd.c: 9: PORTAbits.RA2 = 0;
  2636  050D  1105               	bcf	5,2	;volatile
  2637  050E                     l128:	
  2638                           
  2639                           ;drv_lcd.c: 10: }
  2640                           ;drv_lcd.c: 12: if (a & 2) {
  2641  050E  1CA0               	btfss	Lcd_Port@a,1
  2642  050F  2D12               	goto	l129
  2643                           
  2644                           ;drv_lcd.c: 13: PORTAbits.RA4 = 1;
  2645  0510  1605               	bsf	5,4	;volatile
  2646                           
  2647                           ;drv_lcd.c: 14: } else {
  2648  0511  2D13               	goto	l130
  2649  0512                     l129:	
  2650                           
  2651                           ;drv_lcd.c: 15: PORTAbits.RA4 = 0;
  2652  0512  1205               	bcf	5,4	;volatile
  2653  0513                     l130:	
  2654                           
  2655                           ;drv_lcd.c: 16: }
  2656                           ;drv_lcd.c: 18: if (a & 4) {
  2657  0513  1D20               	btfss	Lcd_Port@a,2
  2658  0514  2D17               	goto	l131
  2659                           
  2660                           ;drv_lcd.c: 19: PORTAbits.RA5 = 1;
  2661  0515  1685               	bsf	5,5	;volatile
  2662                           
  2663                           ;drv_lcd.c: 20: } else {
  2664  0516  2D18               	goto	l132
  2665  0517                     l131:	
  2666                           
  2667                           ;drv_lcd.c: 21: PORTAbits.RA5 = 0;
  2668  0517  1285               	bcf	5,5	;volatile
  2669  0518                     l132:	
  2670                           
  2671                           ;drv_lcd.c: 22: }
  2672                           ;drv_lcd.c: 24: if (a & 8) {
  2673  0518  1DA0               	btfss	Lcd_Port@a,3
  2674  0519  2D1C               	goto	l133
  2675                           
  2676                           ;drv_lcd.c: 25: PORTEbits.RE0 = 1;
  2677  051A  1409               	bsf	9,0	;volatile
  2678                           
  2679                           ;drv_lcd.c: 26: } else {
  2680  051B  0008               	return
  2681  051C                     l133:	
  2682                           
  2683                           ;drv_lcd.c: 27: PORTEbits.RE0 = 0;
  2684  051C  1009               	bcf	9,0	;volatile
  2685  051D  0008               	return
  2686  051E                     __end_of_Lcd_Port:	
  2687                           
  2688                           	psect	text14
  2689  027D                     __ptext14:	
  2690 ;; *************** function _isr *****************
  2691 ;; Defined at:
  2692 ;;		line 76 in file "main.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  t0if            2    9[COMMON] int 
  2697 ;;  rbif            2    7[COMMON] int 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2707 ;;      Params:         0       0       0       0       0
  2708 ;;      Locals:         4       0       0       0       0
  2709 ;;      Temps:          7       0       0       0       0
  2710 ;;      Totals:        11       0       0       0       0
  2711 ;;Total ram usage:       11 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		Interrupt level 1
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           
  2721                           ;psect for function _isr
  2722  027D                     _isr:	
  2723                           
  2724                           ;main.c: 78: int rbif = INTCONbits.RBIF;
  2725  027D  080B               	movf	11,w	;volatile
  2726  027E  3901               	andlw	1
  2727  027F  00F0               	movwf	??_isr
  2728  0280  01F1               	clrf	??_isr+1
  2729  0281  0870               	movf	??_isr,w
  2730  0282  00F7               	movwf	isr@rbif
  2731  0283  0871               	movf	??_isr+1,w
  2732  0284  00F8               	movwf	isr@rbif+1
  2733                           
  2734                           ;main.c: 79: int t0if = INTCONbits.T0IF;
  2735  0285  0C0B               	rrf	11,w	;volatile
  2736  0286  00F0               	movwf	??_isr
  2737  0287  0C70               	rrf	??_isr,w
  2738  0288  3901               	andlw	1
  2739  0289  00F1               	movwf	??_isr+1
  2740  028A  01F2               	clrf	??_isr+2
  2741  028B  0871               	movf	??_isr+1,w
  2742  028C  00F9               	movwf	isr@t0if
  2743  028D  0872               	movf	??_isr+2,w
  2744  028E  00FA               	movwf	isr@t0if+1
  2745                           
  2746                           ;main.c: 81: INTCON = 0x28;
  2747  028F  3028               	movlw	40
  2748  0290  008B               	movwf	11	;volatile
  2749                           
  2750                           ;main.c: 83: if (rbif)
  2751  0291  0877               	movf	isr@rbif,w
  2752  0292  0478               	iorwf	isr@rbif+1,w
  2753  0293  1903               	btfsc	3,2
  2754  0294  2AD2               	goto	i1l87
  2755                           
  2756                           ;main.c: 84: {
  2757                           ;main.c: 85: if (renc_a_ant < PORTBbits.RB4 && renc_b_ant < PORTBbits.RB5)
  2758  0295  0E06               	swapf	6,w	;volatile
  2759  0296  3901               	andlw	1
  2760  0297  00F0               	movwf	??_isr
  2761  0298  3000               	movlw	0
  2762  0299  19FB               	btfsc	_renc_a_ant/(0+8),_renc_a_ant& (0+7)
  2763  029A  3001               	movlw	1
  2764  029B  00F1               	movwf	??_isr+1
  2765  029C  0870               	movf	??_isr,w
  2766  029D  0271               	subwf	??_isr+1,w
  2767  029E  1803               	skipnc
  2768  029F  2AB0               	goto	i1l1357
  2769  02A0  0E06               	swapf	6,w	;volatile
  2770  02A1  00F0               	movwf	??_isr
  2771  02A2  0C70               	rrf	??_isr,w
  2772  02A3  3901               	andlw	1
  2773  02A4  00F1               	movwf	??_isr+1
  2774  02A5  3000               	movlw	0
  2775  02A6  197B               	btfsc	_renc_b_ant/(0+8),_renc_b_ant& (0+7)
  2776  02A7  3001               	movlw	1
  2777  02A8  00F2               	movwf	??_isr+2
  2778  02A9  0871               	movf	??_isr+1,w
  2779  02AA  0272               	subwf	??_isr+2,w
  2780  02AB  1803               	skipnc
  2781  02AC  2AB0               	goto	i1l1357
  2782                           
  2783                           ;main.c: 86: {
  2784                           ;main.c: 87: paso--;
  2785  02AD  3001               	movlw	1
  2786  02AE  02D9               	subwf	_paso,f
  2787                           
  2788                           ;main.c: 88: }
  2789  02AF  2ACA               	goto	i1l1363
  2790  02B0                     i1l1357:	
  2791                           
  2792                           ;main.c: 89: else if(renc_a_ant < PORTBbits.RB4 && renc_b_ant == PORTBbits.RB5)
  2793  02B0  0E06               	swapf	6,w	;volatile
  2794  02B1  3901               	andlw	1
  2795  02B2  00F0               	movwf	??_isr
  2796  02B3  3000               	movlw	0
  2797  02B4  19FB               	btfsc	_renc_a_ant/(0+8),_renc_a_ant& (0+7)
  2798  02B5  3001               	movlw	1
  2799  02B6  00F1               	movwf	??_isr+1
  2800  02B7  0870               	movf	??_isr,w
  2801  02B8  0271               	subwf	??_isr+1,w
  2802  02B9  1803               	skipnc
  2803  02BA  2ACA               	goto	i1l1363
  2804  02BB  0E06               	swapf	6,w	;volatile
  2805  02BC  00F0               	movwf	??_isr
  2806  02BD  0C70               	rrf	??_isr,w
  2807  02BE  3901               	andlw	1
  2808  02BF  00F1               	movwf	??_isr+1
  2809  02C0  3000               	movlw	0
  2810  02C1  197B               	btfsc	_renc_b_ant/(0+8),_renc_b_ant& (0+7)
  2811  02C2  3001               	movlw	1
  2812  02C3  0671               	xorwf	??_isr+1,w
  2813  02C4  1D03               	skipz
  2814  02C5  2ACA               	goto	i1l1363
  2815                           
  2816                           ;main.c: 90: {
  2817                           ;main.c: 91: paso++;
  2818  02C6  3001               	movlw	1
  2819  02C7  00F0               	movwf	??_isr
  2820  02C8  0870               	movf	??_isr,w
  2821  02C9  07D9               	addwf	_paso,f
  2822  02CA                     i1l1363:	
  2823                           
  2824                           ;main.c: 92: }
  2825                           ;main.c: 94: renc_a_ant = PORTBbits.RB4;
  2826  02CA  11FB               	bcf	_renc_a_ant/(0+8),_renc_a_ant& (0+7)
  2827  02CB  1A06               	btfsc	6,4	;volatile
  2828  02CC  15FB               	bsf	_renc_a_ant/(0+8),_renc_a_ant& (0+7)
  2829                           
  2830                           ;main.c: 95: renc_b_ant = PORTBbits.RB5;
  2831  02CD  117B               	bcf	_renc_b_ant/(0+8),_renc_b_ant& (0+7)
  2832  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  2833  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  2834  02D0  1A86               	btfsc	6,5	;volatile
  2835  02D1  157B               	bsf	_renc_b_ant/(0+8),_renc_b_ant& (0+7)
  2836  02D2                     i1l87:	
  2837                           
  2838                           ;main.c: 96: }
  2839                           ;main.c: 98: if (t0if)
  2840  02D2  0879               	movf	isr@t0if,w
  2841  02D3  047A               	iorwf	isr@t0if+1,w
  2842  02D4  1903               	btfsc	3,2
  2843  02D5  2AF1               	goto	i1l1383
  2844                           
  2845                           ;main.c: 99: {
  2846                           ;main.c: 100: TMR0 = 0;
  2847  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  2848  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  2849  02D8  0181               	clrf	1	;volatile
  2850                           
  2851                           ;main.c: 102: if (pwmr <= TMR2)
  2852  02D9  087D               	movf	_pwmr,w
  2853  02DA  0211               	subwf	17,w	;volatile
  2854  02DB  1C03               	skipc
  2855  02DC  2ADF               	goto	i1l92
  2856                           
  2857                           ;main.c: 103: {PORTDbits.RD6 = 0;}
  2858  02DD  1308               	bcf	8,6	;volatile
  2859  02DE  2AE0               	goto	i1l1373
  2860  02DF                     i1l92:	
  2861                           
  2862                           ;main.c: 104: else
  2863                           ;main.c: 105: {PORTDbits.RD6 = 1;}
  2864  02DF  1708               	bsf	8,6	;volatile
  2865  02E0                     i1l1373:	
  2866                           
  2867                           ;main.c: 107: if (pwmg <= TMR2)
  2868  02E0  087C               	movf	_pwmg,w
  2869  02E1  0211               	subwf	17,w	;volatile
  2870  02E2  1C03               	skipc
  2871  02E3  2AE6               	goto	i1l94
  2872                           
  2873                           ;main.c: 108: {PORTDbits.RD7 = 0;}
  2874  02E4  1388               	bcf	8,7	;volatile
  2875  02E5  2AE7               	goto	i1l1377
  2876  02E6                     i1l94:	
  2877                           
  2878                           ;main.c: 109: else
  2879                           ;main.c: 110: {PORTDbits.RD7 = 1;}
  2880  02E6  1788               	bsf	8,7	;volatile
  2881  02E7                     i1l1377:	
  2882                           
  2883                           ;main.c: 112: if (pwmb <= TMR2)
  2884  02E7  0848               	movf	_pwmb,w
  2885  02E8  0211               	subwf	17,w	;volatile
  2886  02E9  1C03               	skipc
  2887  02EA  2AED               	goto	i1l96
  2888                           
  2889                           ;main.c: 113: {PORTDbits.RD5 = 0;}
  2890  02EB  1288               	bcf	8,5	;volatile
  2891  02EC  2AEE               	goto	i1l1381
  2892  02ED                     i1l96:	
  2893                           
  2894                           ;main.c: 114: else
  2895                           ;main.c: 115: {PORTDbits.RD5 = 1;}
  2896  02ED  1688               	bsf	8,5	;volatile
  2897  02EE                     i1l1381:	
  2898                           
  2899                           ;main.c: 118: TMR0 = TMR0 + 176;
  2900  02EE  0801               	movf	1,w	;volatile
  2901  02EF  3EB0               	addlw	176
  2902  02F0  0081               	movwf	1	;volatile
  2903  02F1                     i1l1383:	
  2904                           
  2905                           ;main.c: 119: }
  2906                           ;main.c: 120: INTCON = 0xA8;
  2907  02F1  30A8               	movlw	168
  2908  02F2  008B               	movwf	11	;volatile
  2909  02F3  0876               	movf	??_isr+6,w
  2910  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2911  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2912  02F6  00FF               	movwf	127
  2913  02F7  0875               	movf	??_isr+5,w
  2914  02F8  008A               	movwf	10
  2915  02F9  0874               	movf	??_isr+4,w
  2916  02FA  0084               	movwf	4
  2917  02FB  0E73               	swapf	(??_isr+3)^(0+-128),w
  2918  02FC  0083               	movwf	3
  2919  02FD  0EFE               	swapf	126,f
  2920  02FE  0E7E               	swapf	126,w
  2921  02FF  0009               	retfie
  2922  0300                     __end_of_isr:	
  2923  007E                     btemp	set	126	;btemp
  2924  007E                     wtemp0	set	126
  2925                           
  2926                           	psect	intentry
  2927  0004                     __pintentry:	
  2928                           ;incstack = 0
  2929                           ; Regs used in _isr: [wreg+status,2+status,0]
  2930                           
  2931  0004                     interrupt_function:	
  2932  007E                     saved_w	set	btemp
  2933  0004  00FE               	movwf	btemp
  2934  0005  0E03               	swapf	3,w
  2935  0006  00F3               	movwf	??_isr+3
  2936  0007  0804               	movf	4,w
  2937  0008  00F4               	movwf	??_isr+4
  2938  0009  080A               	movf	10,w
  2939  000A  00F5               	movwf	??_isr+5
  2940  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2941  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2942  000D  087F               	movf	btemp+1,w
  2943  000E  00F6               	movwf	??_isr+6
  2944  000F  120A  118A  2A7D   	ljmp	_isr


Data Sizes:
    Strings     33
    Constant    10
    Data        4
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     40      58
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_3(CODE[8]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> vector(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_print@s	PTR const unsigned char  size(2) Largest target is 30
		 -> vector(BANK0[15]), STR_1(CODE[9]), 

    vector	PTR unsigned char [15] size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_setCursor->_lcd_write
    _lcd_print->_lcd_putch
    _lcd_putch->_lcd_write
    _lcd_init->_lcd_write
    _lcd_clear->_lcd_write
    _lcd_write->_Lcd_Port

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    2991
                                             33 BANK0      7     7      0
                          _lcd_clear
                           _lcd_init
                          _lcd_print
                      _lcd_setCursor
                          _lcd_write
                          _pwmupdate
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    1709
                                             14 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _pwmupdate                                            3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_setCursor                                        4     0      4     432
                                              3 BANK0      4     0      4
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_print                                            4     2      2     366
                                              4 BANK0      4     2      2
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (2) _lcd_putch                                            1     1      0     154
                                              3 BANK0      1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     220
                                              3 BANK0      3     3      0
                           _Lcd_Port
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            2     2      0     132
                                              3 BANK0      2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            2     2      0     132
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0      46
                                              0 COMMON    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_clear
     _lcd_write
       _Lcd_Port
   _lcd_init
     _Lcd_Port
     _lcd_write
       _Lcd_Port
   _lcd_print
     _lcd_putch
       _lcd_write
         _Lcd_Port
   _lcd_setCursor
     _lcd_write
       _Lcd_Port
   _lcd_write
     _Lcd_Port
   _pwmupdate
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      3A       5       72.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      48      12        0.0%
ABS                  0      0      48       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 05 10:42:03 2017

                      pc 0002           ?_lcd_setCursor 0023              __CFG_CP$OFF 0000  
                     fsr 0004      ___wmul@multiplicand 0022                      l130 0513  
                    l131 0517                      l132 0518                      l116 04A1  
                    l133 051C                      l310 04D6                      l127 050D  
                    l215 0116                      l128 050E                      l129 0512  
                    _PR2 0092             __CFG_CPD$OFF 0000                      u615 036A  
                    u715 03C6                      u725 03D2                      u735 03DC  
                    u655 04D7                      u665 04DE                      u765 0446  
                    u925 0125                      u695 03BA                      u785 0457  
                    u795 0460                      u885 00FE                      _isr 027D  
                    fsr0 0004                      indf 0000             __CFG_IESO$ON 0000  
           __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000                     l1121 0541  
                   l1151 03C5                     l1127 04CE                     l1303 0135  
                   l1241 048D                     l1161 03E6                     l1313 0152  
                   l1305 0139                     l1227 04A5                     l1235 047F  
                   l1307 013D                     l1331 01A8                     l1341 04FA  
                   l1237 0483                     l1245 0492                     l1157 03DB  
                   l1149 03B7                     l1173 0443                     l1261 0077  
                   l1239 0488                     l1175 0451                     l1183 046A  
                   l1327 0165                     l1319 0161                     l1271 00B1  
                   l1255 0062                     l1273 00C8                     l1329 0040  
                   l1179 045F                     l1283 00E1                     l1427 0202  
                   l1295 0108                     l1289 00E7                     ?_isr 0070  
                   STR_1 042A                     STR_2 041A                     STR_3 0433  
                   u1117 020A                     u1207 0379                     u1127 0308  
                   u1217 0383                     u1137 031B                     u1227 0394  
                   u1147 0325                     _IOCB 0096                     u1237 039E  
                   u1157 0335                     u1247 03A8                     u1167 033F  
                   u1177 034C                     u1187 035B                     u1197 052D  
                   i1l92 02DF                     i1l94 02E6                     i1l87 02D2  
                   i1l96 02ED                     _TMR0 0001                     _TMR2 0011  
            lcd_print@cs 0027             __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000  
                   _but1 03D9                     _but2 03D8                     _main 01AF  
                   _paso 0059                     _pwmb 0048                     _pwmg 007C  
                   _pwmr 007D                     btemp 007E                     start 0012  
          __CFG_MCLRE$ON 0000                    ??_isr 0070                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _ANSEL 0188                    _T2CON 0012  
        __end_of___lwdiv 03EB          __end_of___lwmod 046F                    _RCREG 001A  
                  _PORTA 0005                    _PORTC 0007                    _PORTD 0008  
                  _PORTE 0009                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _TXREG 0019            __CFG_PWRTE$ON 0000          __end_of_dpowers 041A  
        __end_of_isdigit 0543           __pbitbssCOMMON 03D8           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 01AF         __end_of_Lcd_Port 051E          __initialization 0015  
        ??_lcd_setCursor 0027             __end_of_main 027D                   ??_main 0041  
                 _ANSELH 0189                   i1l1363 02CA                   i1l1381 02EE  
                 i1l1373 02E0                   i1l1357 02B0                   i1l1383 02F1  
                 i1l1377 02E7                   _INTCON 000B         __end_of_lcd_init 0364  
                 ___wmul 04CA                ??___lwdiv 0024                ??___lwmod 002C  
                 _vector 0049             __pdataCOMMON 007C                ??_isdigit 0020  
                 saved_w 007E                ??_sprintf 0035  __end_of__initialization 0035  
         __pcstackCOMMON 0070             __pidataBANK0 0556       __size_of_lcd_clear 0015  
              ?_Lcd_Port 0070       __size_of_lcd_print 0028       __size_of_lcd_putch 0009  
     __size_of_lcd_write 0049             sprintf@width 003D               __pbssBANK0 0048  
             __pmaintext 01AF                  ?___wmul 0020               __pintentry 0004  
             ??_Lcd_Port 0020                ?_lcd_init 0070               _encpwmmode 0058  
             __stringtab 0400       __size_of_pwmupdate 0033        __end_of_lcd_clear 0533  
      __end_of_lcd_print 04CA        __end_of_lcd_putch 054C        __end_of_lcd_write 03AD  
        __size_of___wmul 0023                  ___lwdiv 03AD                  ___lwmod 043B  
                __ptext1 0039                  __ptext2 0533                  __ptext3 04CA  
                __ptext4 043B                  __ptext5 03AD                  __ptext6 046F  
                __ptext7 04ED                  __ptext8 04A2                  __ptext9 0543  
                _dpowers 0410                  _isdigit 0533             __size_of_isr 0083  
             _renc_a_ant 03DB               _renc_b_ant 03DA                  _sprintf 0039  
                clrloop0 054D               ??_lcd_init 0023     end_of_initialization 0035  
                isr@t0if 0079                  isr@rbif 0077                Lcd_Port@a 0020  
  __end_of_lcd_setCursor 0506        __end_of_pwmupdate 04A2                _PORTAbits 0005  
              _PORTBbits 0006                _PORTCbits 0007                _PORTDbits 0008  
              _PORTEbits 0009                _TXSTAbits 0098               lcd_print@s 0024  
             lcd_putch@c 0023               lcd_write@c 0022           __end_of___wmul 04ED  
          __pidataCOMMON 0554     lcd_setCursor@columna 0023      start_initialization 0015  
            __end_of_isr 0300        lcd_setCursor@fila 0025        __size_of_Lcd_Port 0018  
               ??___wmul 0024              __pdataBANK0 0058                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_lcd_init 0064              sprintf@flag 003A  
            sprintf@prec 0039         ___lwdiv@dividend 0022                 ?___lwdiv 0020  
               ?___lwmod 0028                _lcd_clear 051E                __pstrings 0400  
              _lcd_print 04A2                _lcd_putch 0543                _lcd_write 0364  
               ?_isdigit 0070         ___lwdiv@quotient 0025                 ?_sprintf 002E  
      interrupt_function 0004           ___wmul@product 0024                clear_ram0 054C  
               _PIE1bits 008C               ?_lcd_clear 0070               ?_lcd_print 0024  
             ?_lcd_putch 0070              __stringbase 040F               ?_lcd_write 0070  
      ___wmul@multiplier 0020                _pwmupdate 046F                 _Lcd_Port 0506  
       __size_of___lwdiv 003E         __size_of___lwmod 0034       __end_of__stringtab 0410  
            _isdigit$624 0020               sprintf@val 003B               ?_pwmupdate 0070  
       __size_of_isdigit 0010          ___lwdiv@divisor 0020          ___lwdiv@counter 0027  
               __ptext10 0300                 __ptext11 051E                 __ptext12 0364  
               __ptext13 0506                 __ptext14 027D        __CFG_BOR4V$BOR40V 0000  
               _lcd_init 0300         __size_of_sprintf 0176   __size_of_lcd_setCursor 0019  
          __size_of_main 00CE              ??_lcd_clear 0023              ??_lcd_print 0026  
            ??_lcd_putch 0023              ??_lcd_write 0021               _INTCONbits 000B  
               isdigit@c 0021                 intlevel1 0000                sprintf@ap 0038  
              sprintf@sp 003F         ___lwmod@dividend 002A                stringcode 040A  
          _lcd_setCursor 04ED               _OPTION_REG 0081                 sprintf@c 0040  
               sprintf@f 002E          ___lwmod@divisor 0028              ??_pwmupdate 0020  
        ___lwmod@counter 002D                 stringdir 040A                 stringtab 0400  
